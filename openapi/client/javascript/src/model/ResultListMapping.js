/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mapping from './Mapping';

/**
 * The ResultListMapping model module.
 * @module model/ResultListMapping
 * @version 1.0.0
 */
class ResultListMapping {
    /**
     * Constructs a new <code>ResultListMapping</code>.
     * @alias module:model/ResultListMapping
     * @param total {Number} the total number of potential results
     * @param limit {Number} the max number results requested
     * @param offset {Number} the starting index requested
     * @param items {Array.<module:model/Mapping>} the items themselves (the format will vary depending on the type of list)
     */
    constructor(total, limit, offset, items) { 
        
        ResultListMapping.initialize(this, total, limit, offset, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, total, limit, offset, items) { 
        obj['total'] = total;
        obj['limit'] = limit;
        obj['offset'] = offset;
        obj['items'] = items;
    }

    /**
     * Constructs a <code>ResultListMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultListMapping} obj Optional instance to populate.
     * @return {module:model/ResultListMapping} The populated <code>ResultListMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultListMapping();

            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Mapping]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResultListMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResultListMapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResultListMapping.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Mapping.validateJSON(item);
            };
        }

        return true;
    }


}

ResultListMapping.RequiredProperties = ["total", "limit", "offset", "items"];

/**
 * the total number of potential results
 * @member {Number} total
 */
ResultListMapping.prototype['total'] = undefined;

/**
 * the max number results requested
 * @member {Number} limit
 */
ResultListMapping.prototype['limit'] = undefined;

/**
 * the starting index requested
 * @member {Number} offset
 */
ResultListMapping.prototype['offset'] = undefined;

/**
 * the score of the search result, when used
 * @member {Number} confidence
 */
ResultListMapping.prototype['confidence'] = undefined;

/**
 * the items themselves (the format will vary depending on the type of list)
 * @member {Array.<module:model/Mapping>} items
 */
ResultListMapping.prototype['items'] = undefined;






export default ResultListMapping;

