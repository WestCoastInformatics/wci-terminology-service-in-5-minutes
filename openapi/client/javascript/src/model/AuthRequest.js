/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthRequest model module.
 * @module model/AuthRequest
 * @version 1.0.0
 */
class AuthRequest {
    /**
     * Constructs a new <code>AuthRequest</code>.
     * Represents info for an authentication request.
     * @alias module:model/AuthRequest
     * @param grantType {module:model/AuthRequest.GrantTypeEnum} 
     */
    constructor(grantType) { 
        
        AuthRequest.initialize(this, grantType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, grantType) { 
        obj['grant_type'] = grantType;
    }

    /**
     * Constructs a <code>AuthRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthRequest} obj Optional instance to populate.
     * @return {module:model/AuthRequest} The populated <code>AuthRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthRequest();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }

        return true;
    }


}

AuthRequest.RequiredProperties = ["grant_type"];

/**
 * the username
 * @member {String} username
 */
AuthRequest.prototype['username'] = undefined;

/**
 * the password
 * @member {String} password
 */
AuthRequest.prototype['password'] = undefined;

/**
 * the token (for a refresh flow)
 * @member {String} token
 */
AuthRequest.prototype['token'] = undefined;

/**
 * @member {module:model/AuthRequest.GrantTypeEnum} grant_type
 */
AuthRequest.prototype['grant_type'] = undefined;





/**
 * Allowed values for the <code>grant_type</code> property.
 * @enum {String}
 * @readonly
 */
AuthRequest['GrantTypeEnum'] = {

    /**
     * value: "username_password"
     * @const
     */
    "username_password": "username_password",

    /**
     * value: "password"
     * @const
     */
    "password": "password",

    /**
     * value: "authorization_code"
     * @const
     */
    "authorization_code": "authorization_code"
};



export default AuthRequest;

