/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Axiom model module.
 * @module model/Axiom
 * @version 1.0.0
 */
class Axiom {
    /**
     * Constructs a new <code>Axiom</code>.
     * the axioms associated with this concept
     * @alias module:model/Axiom
     * @param created {Date} the created date
     * @param local {Boolean} indicates whether this data element was created by local editing
     * @param modifiedBy {String} the identifier of the user who made the last modification
     * @param modified {Date} the last modified date
     * @param id {String} the unique identifier
     * @param active {Boolean} indicates whether or not this data element is active
     * @param terminology {String} the terminology abbreviation
     */
    constructor(created, local, modifiedBy, modified, id, active, terminology) { 
        
        Axiom.initialize(this, created, local, modifiedBy, modified, id, active, terminology);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, local, modifiedBy, modified, id, active, terminology) { 
        obj['created'] = created;
        obj['local'] = local;
        obj['modifiedBy'] = modifiedBy;
        obj['modified'] = modified;
        obj['id'] = id;
        obj['active'] = active;
        obj['terminology'] = terminology;
    }

    /**
     * Constructs a <code>Axiom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Axiom} obj Optional instance to populate.
     * @return {module:model/Axiom} The populated <code>Axiom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Axiom();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('local')) {
                obj['local'] = ApiClient.convertToType(data['local'], 'Boolean');
            }
            if (data.hasOwnProperty('modifiedBy')) {
                obj['modifiedBy'] = ApiClient.convertToType(data['modifiedBy'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('terminology')) {
                obj['terminology'] = ApiClient.convertToType(data['terminology'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Axiom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Axiom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Axiom.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['modifiedBy'] && !(typeof data['modifiedBy'] === 'string' || data['modifiedBy'] instanceof String)) {
            throw new Error("Expected the field `modifiedBy` to be a primitive type in the JSON string but got " + data['modifiedBy']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['terminology'] && !(typeof data['terminology'] === 'string' || data['terminology'] instanceof String)) {
            throw new Error("Expected the field `terminology` to be a primitive type in the JSON string but got " + data['terminology']);
        }

        return true;
    }


}

Axiom.RequiredProperties = ["created", "local", "modifiedBy", "modified", "id", "active", "terminology"];

/**
 * @member {String} code
 */
Axiom.prototype['code'] = undefined;

/**
 * @member {String} value
 */
Axiom.prototype['value'] = undefined;

/**
 * the created date
 * @member {Date} created
 */
Axiom.prototype['created'] = undefined;

/**
 * indicates whether this data element was created by local editing
 * @member {Boolean} local
 */
Axiom.prototype['local'] = undefined;

/**
 * the identifier of the user who made the last modification
 * @member {String} modifiedBy
 */
Axiom.prototype['modifiedBy'] = undefined;

/**
 * the last modified date
 * @member {Date} modified
 */
Axiom.prototype['modified'] = undefined;

/**
 * the unique identifier
 * @member {String} id
 */
Axiom.prototype['id'] = undefined;

/**
 * indicates whether or not this data element is active
 * @member {Boolean} active
 */
Axiom.prototype['active'] = undefined;

/**
 * the terminology abbreviation
 * @member {String} terminology
 */
Axiom.prototype['terminology'] = undefined;






export default Axiom;

