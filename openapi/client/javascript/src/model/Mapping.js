/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Mapping model module.
 * @module model/Mapping
 * @version 1.0.0
 */
class Mapping {
    /**
     * Constructs a new <code>Mapping</code>.
     * Represents a mapping from a concept in one terminology to a concept in another
     * @alias module:model/Mapping
     * @param fromTerminology {String} the terminology of the 'from' code
     * @param fromCode {String} the 'from' code (the left-hand side)
     * @param toTerminology {String} the terminology of the 'to' code
     * @param toCode {String} the 'to' code (the left-hand side)
     * @param fromName {String} the name of the 'from' code
     * @param toName {String} the name of the 'to' code
     * @param mapsetCode {String} the code of the mapset containing this mapping
     * @param created {Date} the created date
     * @param local {Boolean} indicates whether this data element was created by local editing
     * @param modifiedBy {String} the identifier of the user who made the last modification
     * @param modified {Date} the last modified date
     * @param id {String} the unique identifier
     * @param active {Boolean} indicates whether or not this data element is active
     */
    constructor(fromTerminology, fromCode, toTerminology, toCode, fromName, toName, mapsetCode, created, local, modifiedBy, modified, id, active) { 
        
        Mapping.initialize(this, fromTerminology, fromCode, toTerminology, toCode, fromName, toName, mapsetCode, created, local, modifiedBy, modified, id, active);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fromTerminology, fromCode, toTerminology, toCode, fromName, toName, mapsetCode, created, local, modifiedBy, modified, id, active) { 
        obj['fromTerminology'] = fromTerminology;
        obj['fromCode'] = fromCode;
        obj['toTerminology'] = toTerminology;
        obj['toCode'] = toCode;
        obj['fromName'] = fromName;
        obj['toName'] = toName;
        obj['mapsetCode'] = mapsetCode;
        obj['created'] = created;
        obj['local'] = local;
        obj['modifiedBy'] = modifiedBy;
        obj['modified'] = modified;
        obj['id'] = id;
        obj['active'] = active;
    }

    /**
     * Constructs a <code>Mapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mapping} obj Optional instance to populate.
     * @return {module:model/Mapping} The populated <code>Mapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mapping();

            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('fromTerminology')) {
                obj['fromTerminology'] = ApiClient.convertToType(data['fromTerminology'], 'String');
            }
            if (data.hasOwnProperty('fromCode')) {
                obj['fromCode'] = ApiClient.convertToType(data['fromCode'], 'String');
            }
            if (data.hasOwnProperty('toTerminology')) {
                obj['toTerminology'] = ApiClient.convertToType(data['toTerminology'], 'String');
            }
            if (data.hasOwnProperty('toCode')) {
                obj['toCode'] = ApiClient.convertToType(data['toCode'], 'String');
            }
            if (data.hasOwnProperty('fromName')) {
                obj['fromName'] = ApiClient.convertToType(data['fromName'], 'String');
            }
            if (data.hasOwnProperty('toName')) {
                obj['toName'] = ApiClient.convertToType(data['toName'], 'String');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], 'String');
            }
            if (data.hasOwnProperty('mapsetCode')) {
                obj['mapsetCode'] = ApiClient.convertToType(data['mapsetCode'], 'String');
            }
            if (data.hasOwnProperty('advice')) {
                obj['advice'] = ApiClient.convertToType(data['advice'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('local')) {
                obj['local'] = ApiClient.convertToType(data['local'], 'Boolean');
            }
            if (data.hasOwnProperty('modifiedBy')) {
                obj['modifiedBy'] = ApiClient.convertToType(data['modifiedBy'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mapping.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['fromTerminology'] && !(typeof data['fromTerminology'] === 'string' || data['fromTerminology'] instanceof String)) {
            throw new Error("Expected the field `fromTerminology` to be a primitive type in the JSON string but got " + data['fromTerminology']);
        }
        // ensure the json data is a string
        if (data['fromCode'] && !(typeof data['fromCode'] === 'string' || data['fromCode'] instanceof String)) {
            throw new Error("Expected the field `fromCode` to be a primitive type in the JSON string but got " + data['fromCode']);
        }
        // ensure the json data is a string
        if (data['toTerminology'] && !(typeof data['toTerminology'] === 'string' || data['toTerminology'] instanceof String)) {
            throw new Error("Expected the field `toTerminology` to be a primitive type in the JSON string but got " + data['toTerminology']);
        }
        // ensure the json data is a string
        if (data['toCode'] && !(typeof data['toCode'] === 'string' || data['toCode'] instanceof String)) {
            throw new Error("Expected the field `toCode` to be a primitive type in the JSON string but got " + data['toCode']);
        }
        // ensure the json data is a string
        if (data['fromName'] && !(typeof data['fromName'] === 'string' || data['fromName'] instanceof String)) {
            throw new Error("Expected the field `fromName` to be a primitive type in the JSON string but got " + data['fromName']);
        }
        // ensure the json data is a string
        if (data['toName'] && !(typeof data['toName'] === 'string' || data['toName'] instanceof String)) {
            throw new Error("Expected the field `toName` to be a primitive type in the JSON string but got " + data['toName']);
        }
        // ensure the json data is a string
        if (data['rule'] && !(typeof data['rule'] === 'string' || data['rule'] instanceof String)) {
            throw new Error("Expected the field `rule` to be a primitive type in the JSON string but got " + data['rule']);
        }
        // ensure the json data is a string
        if (data['mapsetCode'] && !(typeof data['mapsetCode'] === 'string' || data['mapsetCode'] instanceof String)) {
            throw new Error("Expected the field `mapsetCode` to be a primitive type in the JSON string but got " + data['mapsetCode']);
        }
        // ensure the json data is a string
        if (data['advice'] && !(typeof data['advice'] === 'string' || data['advice'] instanceof String)) {
            throw new Error("Expected the field `advice` to be a primitive type in the JSON string but got " + data['advice']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['modifiedBy'] && !(typeof data['modifiedBy'] === 'string' || data['modifiedBy'] instanceof String)) {
            throw new Error("Expected the field `modifiedBy` to be a primitive type in the JSON string but got " + data['modifiedBy']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

Mapping.RequiredProperties = ["fromTerminology", "fromCode", "toTerminology", "toCode", "fromName", "toName", "mapsetCode", "created", "local", "modifiedBy", "modified", "id", "active"];

/**
 * the value for the group this map participates in (for complex maps that use groups)
 * @member {String} group
 */
Mapping.prototype['group'] = undefined;

/**
 * the map category (for RF2-based maps)
 * @member {String} category
 */
Mapping.prototype['category'] = undefined;

/**
 * the terminology of the 'from' code
 * @member {String} fromTerminology
 */
Mapping.prototype['fromTerminology'] = undefined;

/**
 * the 'from' code (the left-hand side)
 * @member {String} fromCode
 */
Mapping.prototype['fromCode'] = undefined;

/**
 * the terminology of the 'to' code
 * @member {String} toTerminology
 */
Mapping.prototype['toTerminology'] = undefined;

/**
 * the 'to' code (the left-hand side)
 * @member {String} toCode
 */
Mapping.prototype['toCode'] = undefined;

/**
 * the name of the 'from' code
 * @member {String} fromName
 */
Mapping.prototype['fromName'] = undefined;

/**
 * the name of the 'to' code
 * @member {String} toName
 */
Mapping.prototype['toName'] = undefined;

/**
 * the machine-readable map rule for this mapping (for complex maps that use rules)
 * @member {String} rule
 */
Mapping.prototype['rule'] = undefined;

/**
 * the code of the mapset containing this mapping
 * @member {String} mapsetCode
 */
Mapping.prototype['mapsetCode'] = undefined;

/**
 * the map advice
 * @member {String} advice
 */
Mapping.prototype['advice'] = undefined;

/**
 * the value for the priority of this map within its group (for complex maps that use groups)
 * @member {String} priority
 */
Mapping.prototype['priority'] = undefined;

/**
 * the created date
 * @member {Date} created
 */
Mapping.prototype['created'] = undefined;

/**
 * indicates whether this data element was created by local editing
 * @member {Boolean} local
 */
Mapping.prototype['local'] = undefined;

/**
 * the identifier of the user who made the last modification
 * @member {String} modifiedBy
 */
Mapping.prototype['modifiedBy'] = undefined;

/**
 * the last modified date
 * @member {Date} modified
 */
Mapping.prototype['modified'] = undefined;

/**
 * the unique identifier
 * @member {String} id
 */
Mapping.prototype['id'] = undefined;

/**
 * indicates whether or not this data element is active
 * @member {Boolean} active
 */
Mapping.prototype['active'] = undefined;

/**
 * key/value pairs associated with this object. Entries in this map are terminology-specific
 * @member {Object.<String, String>} attributes
 */
Mapping.prototype['attributes'] = undefined;






export default Mapping;

