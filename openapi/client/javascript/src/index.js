/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Atom from './model/Atom';
import AuthRequest from './model/AuthRequest';
import AuthResponse from './model/AuthResponse';
import Axiom from './model/Axiom';
import Concept from './model/Concept';
import ConceptRelationship from './model/ConceptRelationship';
import ConceptTreePosition from './model/ConceptTreePosition';
import Definition from './model/Definition';
import Mapping from './model/Mapping';
import Mapset from './model/Mapset';
import Metadata from './model/Metadata';
import ResultListConcept from './model/ResultListConcept';
import ResultListConceptRelationship from './model/ResultListConceptRelationship';
import ResultListConceptTreePosition from './model/ResultListConceptTreePosition';
import ResultListMapping from './model/ResultListMapping';
import ResultListMapset from './model/ResultListMapset';
import ResultListSubset from './model/ResultListSubset';
import Subset from './model/Subset';
import Terminology from './model/Terminology';
import TerminologyMetadata from './model/TerminologyMetadata';
import LoginApi from './api/LoginApi';
import TerminologyApi from './api/TerminologyApi';


/**
* API documentation for the &lt;a href&#x3D;\&quot;https://www.westcoastinformatics.com\&quot;&gt;West Coast Informatics&lt;/a&gt; terminology server API.&lt;p&gt;Request a 30-day bearer token from &lt;a href&#x3D;\&quot;mailto:info@westcoastinformatics.com\&quot;&gt;info@westcoastinformatics.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For full documentation on this service, please visit our wiki page at &lt;a href&#x3D;\&quot;https://wci-wiki.atlassian.net/wiki/spaces/TSV2\&quot;&gt;https://wci-wiki.atlassian.net/wiki/spaces/TSV2&lt;/a&gt;.&lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var WestCoastInformaticsTerminologyApi = require('index'); // See note below*.
* var xxxSvc = new WestCoastInformaticsTerminologyApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new WestCoastInformaticsTerminologyApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new WestCoastInformaticsTerminologyApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new WestCoastInformaticsTerminologyApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Atom model constructor.
     * @property {module:model/Atom}
     */
    Atom,

    /**
     * The AuthRequest model constructor.
     * @property {module:model/AuthRequest}
     */
    AuthRequest,

    /**
     * The AuthResponse model constructor.
     * @property {module:model/AuthResponse}
     */
    AuthResponse,

    /**
     * The Axiom model constructor.
     * @property {module:model/Axiom}
     */
    Axiom,

    /**
     * The Concept model constructor.
     * @property {module:model/Concept}
     */
    Concept,

    /**
     * The ConceptRelationship model constructor.
     * @property {module:model/ConceptRelationship}
     */
    ConceptRelationship,

    /**
     * The ConceptTreePosition model constructor.
     * @property {module:model/ConceptTreePosition}
     */
    ConceptTreePosition,

    /**
     * The Definition model constructor.
     * @property {module:model/Definition}
     */
    Definition,

    /**
     * The Mapping model constructor.
     * @property {module:model/Mapping}
     */
    Mapping,

    /**
     * The Mapset model constructor.
     * @property {module:model/Mapset}
     */
    Mapset,

    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata,

    /**
     * The ResultListConcept model constructor.
     * @property {module:model/ResultListConcept}
     */
    ResultListConcept,

    /**
     * The ResultListConceptRelationship model constructor.
     * @property {module:model/ResultListConceptRelationship}
     */
    ResultListConceptRelationship,

    /**
     * The ResultListConceptTreePosition model constructor.
     * @property {module:model/ResultListConceptTreePosition}
     */
    ResultListConceptTreePosition,

    /**
     * The ResultListMapping model constructor.
     * @property {module:model/ResultListMapping}
     */
    ResultListMapping,

    /**
     * The ResultListMapset model constructor.
     * @property {module:model/ResultListMapset}
     */
    ResultListMapset,

    /**
     * The ResultListSubset model constructor.
     * @property {module:model/ResultListSubset}
     */
    ResultListSubset,

    /**
     * The Subset model constructor.
     * @property {module:model/Subset}
     */
    Subset,

    /**
     * The Terminology model constructor.
     * @property {module:model/Terminology}
     */
    Terminology,

    /**
     * The TerminologyMetadata model constructor.
     * @property {module:model/TerminologyMetadata}
     */
    TerminologyMetadata,

    /**
    * The LoginApi service constructor.
    * @property {module:api/LoginApi}
    */
    LoginApi,

    /**
    * The TerminologyApi service constructor.
    * @property {module:api/TerminologyApi}
    */
    TerminologyApi
};
