/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WestCoastInformaticsTerminologyApi);
  }
}(this, function(expect, WestCoastInformaticsTerminologyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WestCoastInformaticsTerminologyApi.Terminology();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Terminology', function() {
    it('should create an instance of Terminology', function() {
      // uncomment below and update the code to test Terminology
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be.a(WestCoastInformaticsTerminologyApi.Terminology);
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property abbreviation (base name: "abbreviation")', function() {
      // uncomment below and update the code to test the property abbreviation
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property systemOid (base name: "systemOid")', function() {
      // uncomment below and update the code to test the property systemOid
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property systemUri (base name: "systemUri")', function() {
      // uncomment below and update the code to test the property systemUri
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property expressionEnabled (base name: "expressionEnabled")', function() {
      // uncomment below and update the code to test the property expressionEnabled
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property local (base name: "local")', function() {
      // uncomment below and update the code to test the property local
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property modifiedBy (base name: "modifiedBy")', function() {
      // uncomment below and update the code to test the property modifiedBy
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new WestCoastInformaticsTerminologyApi.Terminology();
      //expect(instance).to.be();
    });

  });

}));
