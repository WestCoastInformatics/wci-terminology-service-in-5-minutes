/**
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WestCoastInformaticsTerminologyApi);
  }
}(this, function(expect, WestCoastInformaticsTerminologyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WestCoastInformaticsTerminologyApi.TerminologyApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TerminologyApi', function() {
    describe('addSynonym', function() {
      it('should call addSynonym successfully', function(done) {
        //uncomment below and update the code to test addSynonym
        //instance.addSynonym(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autocompleteConcepts1', function() {
      it('should call autocompleteConcepts1 successfully', function(done) {
        //uncomment below and update the code to test autocompleteConcepts1
        //instance.autocompleteConcepts1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findConcepts', function() {
      it('should call findConcepts successfully', function(done) {
        //uncomment below and update the code to test findConcepts
        //instance.findConcepts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findConcepts2', function() {
      it('should call findConcepts2 successfully', function(done) {
        //uncomment below and update the code to test findConcepts2
        //instance.findConcepts2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findMappings1', function() {
      it('should call findMappings1 successfully', function(done) {
        //uncomment below and update the code to test findMappings1
        //instance.findMappings1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSubsetMemberships1', function() {
      it('should call findSubsetMemberships1 successfully', function(done) {
        //uncomment below and update the code to test findSubsetMemberships1
        //instance.findSubsetMemberships1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTreePositionChildren1', function() {
      it('should call findTreePositionChildren1 successfully', function(done) {
        //uncomment below and update the code to test findTreePositionChildren1
        //instance.findTreePositionChildren1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTreePositions1', function() {
      it('should call findTreePositions1 successfully', function(done) {
        //uncomment below and update the code to test findTreePositions1
        //instance.findTreePositions1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConcept1', function() {
      it('should call getConcept1 successfully', function(done) {
        //uncomment below and update the code to test getConcept1
        //instance.getConcept1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConceptMappings1', function() {
      it('should call getConceptMappings1 successfully', function(done) {
        //uncomment below and update the code to test getConceptMappings1
        //instance.getConceptMappings1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigProperties1', function() {
      it('should call getConfigProperties1 successfully', function(done) {
        //uncomment below and update the code to test getConfigProperties1
        //instance.getConfigProperties1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapset1', function() {
      it('should call getMapset1 successfully', function(done) {
        //uncomment below and update the code to test getMapset1
        //instance.getMapset1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapsets1', function() {
      it('should call getMapsets1 successfully', function(done) {
        //uncomment below and update the code to test getMapsets1
        //instance.getMapsets1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRelationships1', function() {
      it('should call getRelationships1 successfully', function(done) {
        //uncomment below and update the code to test getRelationships1
        //instance.getRelationships1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubset1', function() {
      it('should call getSubset1 successfully', function(done) {
        //uncomment below and update the code to test getSubset1
        //instance.getSubset1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubsets1', function() {
      it('should call getSubsets1 successfully', function(done) {
        //uncomment below and update the code to test getSubsets1
        //instance.getSubsets1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubtree1', function() {
      it('should call getSubtree1 successfully', function(done) {
        //uncomment below and update the code to test getSubtree1
        //instance.getSubtree1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTerminologies1', function() {
      it('should call getTerminologies1 successfully', function(done) {
        //uncomment below and update the code to test getTerminologies1
        //instance.getTerminologies1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTerminology1', function() {
      it('should call getTerminology1 successfully', function(done) {
        //uncomment below and update the code to test getTerminology1
        //instance.getTerminology1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTerminologyMetadata1', function() {
      it('should call getTerminologyMetadata1 successfully', function(done) {
        //uncomment below and update the code to test getTerminologyMetadata1
        //instance.getTerminologyMetadata1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveExpression1', function() {
      it('should call resolveExpression1 successfully', function(done) {
        //uncomment below and update the code to test resolveExpression1
        //instance.resolveExpression1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
