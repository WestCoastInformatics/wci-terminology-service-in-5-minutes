/*
West Coast Informatics Terminology API

Testing TerminologyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TerminologyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TerminologyAPIService AddSynonym", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.AddSynonym(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService AutocompleteConcepts1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.AutocompleteConcepts1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindConcepts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.FindConcepts(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindConcepts2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TerminologyAPI.FindConcepts2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindMappings1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.FindMappings1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindSubsetMemberships1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.FindSubsetMemberships1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindTreePositionChildren1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.FindTreePositionChildren1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService FindTreePositions1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.FindTreePositions1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetConcept1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetConcept1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetConceptMappings1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetConceptMappings1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetConfigProperties1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TerminologyAPI.GetConfigProperties1(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetMapset1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetMapset1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetMapsets1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.GetMapsets1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetRelationships1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetRelationships1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetSubset1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetSubset1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetSubsets1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.GetSubsets1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetSubtree1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string
		var code string

		resp, httpRes, err := apiClient.TerminologyAPI.GetSubtree1(context.Background(), terminology, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetTerminologies1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TerminologyAPI.GetTerminologies1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetTerminology1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.GetTerminology1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService GetTerminologyMetadata1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		httpRes, err := apiClient.TerminologyAPI.GetTerminologyMetadata1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminologyAPIService ResolveExpression1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminology string

		resp, httpRes, err := apiClient.TerminologyAPI.ResolveExpression1(context.Background(), terminology).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
