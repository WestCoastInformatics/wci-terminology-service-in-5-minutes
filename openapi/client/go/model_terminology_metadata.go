/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TerminologyMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerminologyMetadata{}

// TerminologyMetadata Represents all types of metadata associated with a terminology
type TerminologyMetadata struct {
	// the attribute names used by the terminology
	AttributeNames *map[string]Metadata `json:"attributeNames,omitempty"`
	Terminology Terminology `json:"terminology"`
	// the semantic types used by the terminology
	SemanticTypes *map[string]Metadata `json:"semanticTypes,omitempty"`
	// the additional relationship types used by the terminology
	AdditionalRelationshipTypes *map[string]Metadata `json:"additionalRelationshipTypes,omitempty"`
	// the relationship types used by the terminology
	RelationshipTypes *map[string]Metadata `json:"relationshipTypes,omitempty"`
	// the term types used by the terminology
	TermTypes *map[string]Metadata `json:"termTypes,omitempty"`
	// the languages used by the terminology
	Languages *map[string]Metadata `json:"languages,omitempty"`
	// miscellaneous terminology metadata (terminology-specific)
	Other *map[string]Metadata `json:"other,omitempty"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
}

// NewTerminologyMetadata instantiates a new TerminologyMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminologyMetadata(terminology Terminology, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool) *TerminologyMetadata {
	this := TerminologyMetadata{}
	this.Terminology = terminology
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	return &this
}

// NewTerminologyMetadataWithDefaults instantiates a new TerminologyMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminologyMetadataWithDefaults() *TerminologyMetadata {
	this := TerminologyMetadata{}
	return &this
}

// GetAttributeNames returns the AttributeNames field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetAttributeNames() map[string]Metadata {
	if o == nil || IsNil(o.AttributeNames) {
		var ret map[string]Metadata
		return ret
	}
	return *o.AttributeNames
}

// GetAttributeNamesOk returns a tuple with the AttributeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetAttributeNamesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.AttributeNames) {
		return nil, false
	}
	return o.AttributeNames, true
}

// HasAttributeNames returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasAttributeNames() bool {
	if o != nil && !IsNil(o.AttributeNames) {
		return true
	}

	return false
}

// SetAttributeNames gets a reference to the given map[string]Metadata and assigns it to the AttributeNames field.
func (o *TerminologyMetadata) SetAttributeNames(v map[string]Metadata) {
	o.AttributeNames = &v
}

// GetTerminology returns the Terminology field value
func (o *TerminologyMetadata) GetTerminology() Terminology {
	if o == nil {
		var ret Terminology
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetTerminologyOk() (*Terminology, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *TerminologyMetadata) SetTerminology(v Terminology) {
	o.Terminology = v
}

// GetSemanticTypes returns the SemanticTypes field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetSemanticTypes() map[string]Metadata {
	if o == nil || IsNil(o.SemanticTypes) {
		var ret map[string]Metadata
		return ret
	}
	return *o.SemanticTypes
}

// GetSemanticTypesOk returns a tuple with the SemanticTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetSemanticTypesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.SemanticTypes) {
		return nil, false
	}
	return o.SemanticTypes, true
}

// HasSemanticTypes returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasSemanticTypes() bool {
	if o != nil && !IsNil(o.SemanticTypes) {
		return true
	}

	return false
}

// SetSemanticTypes gets a reference to the given map[string]Metadata and assigns it to the SemanticTypes field.
func (o *TerminologyMetadata) SetSemanticTypes(v map[string]Metadata) {
	o.SemanticTypes = &v
}

// GetAdditionalRelationshipTypes returns the AdditionalRelationshipTypes field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetAdditionalRelationshipTypes() map[string]Metadata {
	if o == nil || IsNil(o.AdditionalRelationshipTypes) {
		var ret map[string]Metadata
		return ret
	}
	return *o.AdditionalRelationshipTypes
}

// GetAdditionalRelationshipTypesOk returns a tuple with the AdditionalRelationshipTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetAdditionalRelationshipTypesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.AdditionalRelationshipTypes) {
		return nil, false
	}
	return o.AdditionalRelationshipTypes, true
}

// HasAdditionalRelationshipTypes returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasAdditionalRelationshipTypes() bool {
	if o != nil && !IsNil(o.AdditionalRelationshipTypes) {
		return true
	}

	return false
}

// SetAdditionalRelationshipTypes gets a reference to the given map[string]Metadata and assigns it to the AdditionalRelationshipTypes field.
func (o *TerminologyMetadata) SetAdditionalRelationshipTypes(v map[string]Metadata) {
	o.AdditionalRelationshipTypes = &v
}

// GetRelationshipTypes returns the RelationshipTypes field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetRelationshipTypes() map[string]Metadata {
	if o == nil || IsNil(o.RelationshipTypes) {
		var ret map[string]Metadata
		return ret
	}
	return *o.RelationshipTypes
}

// GetRelationshipTypesOk returns a tuple with the RelationshipTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetRelationshipTypesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.RelationshipTypes) {
		return nil, false
	}
	return o.RelationshipTypes, true
}

// HasRelationshipTypes returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasRelationshipTypes() bool {
	if o != nil && !IsNil(o.RelationshipTypes) {
		return true
	}

	return false
}

// SetRelationshipTypes gets a reference to the given map[string]Metadata and assigns it to the RelationshipTypes field.
func (o *TerminologyMetadata) SetRelationshipTypes(v map[string]Metadata) {
	o.RelationshipTypes = &v
}

// GetTermTypes returns the TermTypes field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetTermTypes() map[string]Metadata {
	if o == nil || IsNil(o.TermTypes) {
		var ret map[string]Metadata
		return ret
	}
	return *o.TermTypes
}

// GetTermTypesOk returns a tuple with the TermTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetTermTypesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.TermTypes) {
		return nil, false
	}
	return o.TermTypes, true
}

// HasTermTypes returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasTermTypes() bool {
	if o != nil && !IsNil(o.TermTypes) {
		return true
	}

	return false
}

// SetTermTypes gets a reference to the given map[string]Metadata and assigns it to the TermTypes field.
func (o *TerminologyMetadata) SetTermTypes(v map[string]Metadata) {
	o.TermTypes = &v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetLanguages() map[string]Metadata {
	if o == nil || IsNil(o.Languages) {
		var ret map[string]Metadata
		return ret
	}
	return *o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetLanguagesOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given map[string]Metadata and assigns it to the Languages field.
func (o *TerminologyMetadata) SetLanguages(v map[string]Metadata) {
	o.Languages = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *TerminologyMetadata) GetOther() map[string]Metadata {
	if o == nil || IsNil(o.Other) {
		var ret map[string]Metadata
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetOtherOk() (*map[string]Metadata, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *TerminologyMetadata) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given map[string]Metadata and assigns it to the Other field.
func (o *TerminologyMetadata) SetOther(v map[string]Metadata) {
	o.Other = &v
}

// GetCreated returns the Created field value
func (o *TerminologyMetadata) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TerminologyMetadata) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *TerminologyMetadata) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *TerminologyMetadata) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *TerminologyMetadata) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *TerminologyMetadata) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *TerminologyMetadata) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *TerminologyMetadata) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *TerminologyMetadata) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TerminologyMetadata) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *TerminologyMetadata) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *TerminologyMetadata) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *TerminologyMetadata) SetActive(v bool) {
	o.Active = v
}

func (o TerminologyMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminologyMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeNames) {
		toSerialize["attributeNames"] = o.AttributeNames
	}
	toSerialize["terminology"] = o.Terminology
	if !IsNil(o.SemanticTypes) {
		toSerialize["semanticTypes"] = o.SemanticTypes
	}
	if !IsNil(o.AdditionalRelationshipTypes) {
		toSerialize["additionalRelationshipTypes"] = o.AdditionalRelationshipTypes
	}
	if !IsNil(o.RelationshipTypes) {
		toSerialize["relationshipTypes"] = o.RelationshipTypes
	}
	if !IsNil(o.TermTypes) {
		toSerialize["termTypes"] = o.TermTypes
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !IsNil(o.Other) {
		toSerialize["other"] = o.Other
	}
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	return toSerialize, nil
}

type NullableTerminologyMetadata struct {
	value *TerminologyMetadata
	isSet bool
}

func (v NullableTerminologyMetadata) Get() *TerminologyMetadata {
	return v.value
}

func (v *NullableTerminologyMetadata) Set(val *TerminologyMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminologyMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminologyMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminologyMetadata(val *TerminologyMetadata) *NullableTerminologyMetadata {
	return &NullableTerminologyMetadata{value: val, isSet: true}
}

func (v NullableTerminologyMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminologyMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


