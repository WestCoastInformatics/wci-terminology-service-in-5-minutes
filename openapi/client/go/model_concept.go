/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Concept type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Concept{}

// Concept Represents a concept with a code in a terminology
type Concept struct {
	// the code in the specified terminology
	Code string `json:"code"`
	// the names associated with this concept
	Atoms []Atom `json:"atoms"`
	// high-level semantic categories associated with this concept - values depend on the terminologies loaded
	SemanticTypes []string `json:"semanticTypes,omitempty"`
	// the definitions associated with this concept
	Definitions []Definition `json:"definitions,omitempty"`
	// the axioms associated with this concept
	Axioms []Axiom `json:"axioms,omitempty"`
	// indicates whether the concept is specified with logical necessary and sufficient conditions.  Generally not important except for description-logic based terminologies where this is important.
	SufficientlyDefined bool `json:"sufficientlyDefined"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
	// the name
	Name string `json:"name"`
	// key/value pairs associated with this object. Entries in this map are terminology-specific
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewConcept instantiates a new Concept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConcept(code string, atoms []Atom, sufficientlyDefined bool, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, terminology string, name string) *Concept {
	this := Concept{}
	this.Code = code
	this.Atoms = atoms
	this.SufficientlyDefined = sufficientlyDefined
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Terminology = terminology
	this.Name = name
	return &this
}

// NewConceptWithDefaults instantiates a new Concept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptWithDefaults() *Concept {
	this := Concept{}
	return &this
}

// GetCode returns the Code field value
func (o *Concept) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Concept) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Concept) SetCode(v string) {
	o.Code = v
}

// GetAtoms returns the Atoms field value
func (o *Concept) GetAtoms() []Atom {
	if o == nil {
		var ret []Atom
		return ret
	}

	return o.Atoms
}

// GetAtomsOk returns a tuple with the Atoms field value
// and a boolean to check if the value has been set.
func (o *Concept) GetAtomsOk() ([]Atom, bool) {
	if o == nil {
		return nil, false
	}
	return o.Atoms, true
}

// SetAtoms sets field value
func (o *Concept) SetAtoms(v []Atom) {
	o.Atoms = v
}

// GetSemanticTypes returns the SemanticTypes field value if set, zero value otherwise.
func (o *Concept) GetSemanticTypes() []string {
	if o == nil || IsNil(o.SemanticTypes) {
		var ret []string
		return ret
	}
	return o.SemanticTypes
}

// GetSemanticTypesOk returns a tuple with the SemanticTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetSemanticTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.SemanticTypes) {
		return nil, false
	}
	return o.SemanticTypes, true
}

// HasSemanticTypes returns a boolean if a field has been set.
func (o *Concept) HasSemanticTypes() bool {
	if o != nil && !IsNil(o.SemanticTypes) {
		return true
	}

	return false
}

// SetSemanticTypes gets a reference to the given []string and assigns it to the SemanticTypes field.
func (o *Concept) SetSemanticTypes(v []string) {
	o.SemanticTypes = v
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *Concept) GetDefinitions() []Definition {
	if o == nil || IsNil(o.Definitions) {
		var ret []Definition
		return ret
	}
	return o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetDefinitionsOk() ([]Definition, bool) {
	if o == nil || IsNil(o.Definitions) {
		return nil, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *Concept) HasDefinitions() bool {
	if o != nil && !IsNil(o.Definitions) {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given []Definition and assigns it to the Definitions field.
func (o *Concept) SetDefinitions(v []Definition) {
	o.Definitions = v
}

// GetAxioms returns the Axioms field value if set, zero value otherwise.
func (o *Concept) GetAxioms() []Axiom {
	if o == nil || IsNil(o.Axioms) {
		var ret []Axiom
		return ret
	}
	return o.Axioms
}

// GetAxiomsOk returns a tuple with the Axioms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetAxiomsOk() ([]Axiom, bool) {
	if o == nil || IsNil(o.Axioms) {
		return nil, false
	}
	return o.Axioms, true
}

// HasAxioms returns a boolean if a field has been set.
func (o *Concept) HasAxioms() bool {
	if o != nil && !IsNil(o.Axioms) {
		return true
	}

	return false
}

// SetAxioms gets a reference to the given []Axiom and assigns it to the Axioms field.
func (o *Concept) SetAxioms(v []Axiom) {
	o.Axioms = v
}

// GetSufficientlyDefined returns the SufficientlyDefined field value
func (o *Concept) GetSufficientlyDefined() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SufficientlyDefined
}

// GetSufficientlyDefinedOk returns a tuple with the SufficientlyDefined field value
// and a boolean to check if the value has been set.
func (o *Concept) GetSufficientlyDefinedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SufficientlyDefined, true
}

// SetSufficientlyDefined sets field value
func (o *Concept) SetSufficientlyDefined(v bool) {
	o.SufficientlyDefined = v
}

// GetCreated returns the Created field value
func (o *Concept) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Concept) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Concept) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Concept) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Concept) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Concept) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Concept) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Concept) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Concept) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Concept) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Concept) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Concept) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Concept) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Concept) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Concept) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Concept) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Concept) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Concept) SetActive(v bool) {
	o.Active = v
}

// GetTerminology returns the Terminology field value
func (o *Concept) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *Concept) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *Concept) SetTerminology(v string) {
	o.Terminology = v
}

// GetName returns the Name field value
func (o *Concept) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Concept) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Concept) SetName(v string) {
	o.Name = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Concept) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Concept) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Concept) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Concept) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Concept) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Concept) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["atoms"] = o.Atoms
	if !IsNil(o.SemanticTypes) {
		toSerialize["semanticTypes"] = o.SemanticTypes
	}
	if !IsNil(o.Definitions) {
		toSerialize["definitions"] = o.Definitions
	}
	if !IsNil(o.Axioms) {
		toSerialize["axioms"] = o.Axioms
	}
	toSerialize["sufficientlyDefined"] = o.SufficientlyDefined
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["terminology"] = o.Terminology
	toSerialize["name"] = o.Name
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableConcept struct {
	value *Concept
	isSet bool
}

func (v NullableConcept) Get() *Concept {
	return v.value
}

func (v *NullableConcept) Set(val *Concept) {
	v.value = val
	v.isSet = true
}

func (v NullableConcept) IsSet() bool {
	return v.isSet
}

func (v *NullableConcept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConcept(val *Concept) *NullableConcept {
	return &NullableConcept{value: val, isSet: true}
}

func (v NullableConcept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConcept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


