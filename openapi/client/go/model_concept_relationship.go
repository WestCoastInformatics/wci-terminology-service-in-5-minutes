/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ConceptRelationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConceptRelationship{}

// ConceptRelationship Represents a relationship between two concepts
type ConceptRelationship struct {
	// indicates whether this relationship is part of the hierarchy
	Hierarchical bool `json:"hierarchical"`
	// the high level type of relationship (more information about this label is provided in the terminology metadata)
	Type string `json:"type"`
	// used by terminologies that group relationships (e.g. SNOMEDCT) to indicate the group value
	Group *string `json:"group,omitempty"`
	// indicates whether this relationship is in the direction asserted by the terminology. This is meaninful because in some instances relationships are loaded in both directions
	AssertedDirection bool `json:"assertedDirection"`
	// the more specific type of relationship (more information about this label is provided in the terminology metadata)
	AdditionalType *string `json:"additionalType,omitempty"`
	// indicates whether this is a relationship is part of the concept logical definition
	Defining bool `json:"defining"`
	// the terminology of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a 'toValue'
	ToTerminology *string `json:"toTerminology,omitempty"`
	// the code of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a 'toValue'
	ToCode *string `json:"toCode,omitempty"`
	// the literal value relationship is to (the right-hand side). If this is null, the relationship will have a 'to'
	ToValue *string `json:"toValue,omitempty"`
	// the name of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a 'toValue'
	ToName *string `json:"toName,omitempty"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the identifier asserted by the terminology
	TerminologyId *string `json:"terminologyId,omitempty"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
}

// NewConceptRelationship instantiates a new ConceptRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConceptRelationship(hierarchical bool, type_ string, assertedDirection bool, defining bool, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, terminology string) *ConceptRelationship {
	this := ConceptRelationship{}
	this.Hierarchical = hierarchical
	this.Type = type_
	this.AssertedDirection = assertedDirection
	this.Defining = defining
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Terminology = terminology
	return &this
}

// NewConceptRelationshipWithDefaults instantiates a new ConceptRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptRelationshipWithDefaults() *ConceptRelationship {
	this := ConceptRelationship{}
	return &this
}

// GetHierarchical returns the Hierarchical field value
func (o *ConceptRelationship) GetHierarchical() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hierarchical
}

// GetHierarchicalOk returns a tuple with the Hierarchical field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetHierarchicalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hierarchical, true
}

// SetHierarchical sets field value
func (o *ConceptRelationship) SetHierarchical(v bool) {
	o.Hierarchical = v
}

// GetType returns the Type field value
func (o *ConceptRelationship) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConceptRelationship) SetType(v string) {
	o.Type = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ConceptRelationship) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ConceptRelationship) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ConceptRelationship) SetGroup(v string) {
	o.Group = &v
}

// GetAssertedDirection returns the AssertedDirection field value
func (o *ConceptRelationship) GetAssertedDirection() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AssertedDirection
}

// GetAssertedDirectionOk returns a tuple with the AssertedDirection field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetAssertedDirectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssertedDirection, true
}

// SetAssertedDirection sets field value
func (o *ConceptRelationship) SetAssertedDirection(v bool) {
	o.AssertedDirection = v
}

// GetAdditionalType returns the AdditionalType field value if set, zero value otherwise.
func (o *ConceptRelationship) GetAdditionalType() string {
	if o == nil || IsNil(o.AdditionalType) {
		var ret string
		return ret
	}
	return *o.AdditionalType
}

// GetAdditionalTypeOk returns a tuple with the AdditionalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetAdditionalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalType) {
		return nil, false
	}
	return o.AdditionalType, true
}

// HasAdditionalType returns a boolean if a field has been set.
func (o *ConceptRelationship) HasAdditionalType() bool {
	if o != nil && !IsNil(o.AdditionalType) {
		return true
	}

	return false
}

// SetAdditionalType gets a reference to the given string and assigns it to the AdditionalType field.
func (o *ConceptRelationship) SetAdditionalType(v string) {
	o.AdditionalType = &v
}

// GetDefining returns the Defining field value
func (o *ConceptRelationship) GetDefining() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Defining
}

// GetDefiningOk returns a tuple with the Defining field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetDefiningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Defining, true
}

// SetDefining sets field value
func (o *ConceptRelationship) SetDefining(v bool) {
	o.Defining = v
}

// GetToTerminology returns the ToTerminology field value if set, zero value otherwise.
func (o *ConceptRelationship) GetToTerminology() string {
	if o == nil || IsNil(o.ToTerminology) {
		var ret string
		return ret
	}
	return *o.ToTerminology
}

// GetToTerminologyOk returns a tuple with the ToTerminology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetToTerminologyOk() (*string, bool) {
	if o == nil || IsNil(o.ToTerminology) {
		return nil, false
	}
	return o.ToTerminology, true
}

// HasToTerminology returns a boolean if a field has been set.
func (o *ConceptRelationship) HasToTerminology() bool {
	if o != nil && !IsNil(o.ToTerminology) {
		return true
	}

	return false
}

// SetToTerminology gets a reference to the given string and assigns it to the ToTerminology field.
func (o *ConceptRelationship) SetToTerminology(v string) {
	o.ToTerminology = &v
}

// GetToCode returns the ToCode field value if set, zero value otherwise.
func (o *ConceptRelationship) GetToCode() string {
	if o == nil || IsNil(o.ToCode) {
		var ret string
		return ret
	}
	return *o.ToCode
}

// GetToCodeOk returns a tuple with the ToCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetToCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ToCode) {
		return nil, false
	}
	return o.ToCode, true
}

// HasToCode returns a boolean if a field has been set.
func (o *ConceptRelationship) HasToCode() bool {
	if o != nil && !IsNil(o.ToCode) {
		return true
	}

	return false
}

// SetToCode gets a reference to the given string and assigns it to the ToCode field.
func (o *ConceptRelationship) SetToCode(v string) {
	o.ToCode = &v
}

// GetToValue returns the ToValue field value if set, zero value otherwise.
func (o *ConceptRelationship) GetToValue() string {
	if o == nil || IsNil(o.ToValue) {
		var ret string
		return ret
	}
	return *o.ToValue
}

// GetToValueOk returns a tuple with the ToValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetToValueOk() (*string, bool) {
	if o == nil || IsNil(o.ToValue) {
		return nil, false
	}
	return o.ToValue, true
}

// HasToValue returns a boolean if a field has been set.
func (o *ConceptRelationship) HasToValue() bool {
	if o != nil && !IsNil(o.ToValue) {
		return true
	}

	return false
}

// SetToValue gets a reference to the given string and assigns it to the ToValue field.
func (o *ConceptRelationship) SetToValue(v string) {
	o.ToValue = &v
}

// GetToName returns the ToName field value if set, zero value otherwise.
func (o *ConceptRelationship) GetToName() string {
	if o == nil || IsNil(o.ToName) {
		var ret string
		return ret
	}
	return *o.ToName
}

// GetToNameOk returns a tuple with the ToName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetToNameOk() (*string, bool) {
	if o == nil || IsNil(o.ToName) {
		return nil, false
	}
	return o.ToName, true
}

// HasToName returns a boolean if a field has been set.
func (o *ConceptRelationship) HasToName() bool {
	if o != nil && !IsNil(o.ToName) {
		return true
	}

	return false
}

// SetToName gets a reference to the given string and assigns it to the ToName field.
func (o *ConceptRelationship) SetToName(v string) {
	o.ToName = &v
}

// GetCreated returns the Created field value
func (o *ConceptRelationship) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ConceptRelationship) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *ConceptRelationship) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *ConceptRelationship) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *ConceptRelationship) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *ConceptRelationship) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *ConceptRelationship) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *ConceptRelationship) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *ConceptRelationship) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConceptRelationship) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *ConceptRelationship) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ConceptRelationship) SetActive(v bool) {
	o.Active = v
}

// GetTerminologyId returns the TerminologyId field value if set, zero value otherwise.
func (o *ConceptRelationship) GetTerminologyId() string {
	if o == nil || IsNil(o.TerminologyId) {
		var ret string
		return ret
	}
	return *o.TerminologyId
}

// GetTerminologyIdOk returns a tuple with the TerminologyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetTerminologyIdOk() (*string, bool) {
	if o == nil || IsNil(o.TerminologyId) {
		return nil, false
	}
	return o.TerminologyId, true
}

// HasTerminologyId returns a boolean if a field has been set.
func (o *ConceptRelationship) HasTerminologyId() bool {
	if o != nil && !IsNil(o.TerminologyId) {
		return true
	}

	return false
}

// SetTerminologyId gets a reference to the given string and assigns it to the TerminologyId field.
func (o *ConceptRelationship) SetTerminologyId(v string) {
	o.TerminologyId = &v
}

// GetTerminology returns the Terminology field value
func (o *ConceptRelationship) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *ConceptRelationship) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *ConceptRelationship) SetTerminology(v string) {
	o.Terminology = v
}

func (o ConceptRelationship) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConceptRelationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hierarchical"] = o.Hierarchical
	toSerialize["type"] = o.Type
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["assertedDirection"] = o.AssertedDirection
	if !IsNil(o.AdditionalType) {
		toSerialize["additionalType"] = o.AdditionalType
	}
	toSerialize["defining"] = o.Defining
	if !IsNil(o.ToTerminology) {
		toSerialize["toTerminology"] = o.ToTerminology
	}
	if !IsNil(o.ToCode) {
		toSerialize["toCode"] = o.ToCode
	}
	if !IsNil(o.ToValue) {
		toSerialize["toValue"] = o.ToValue
	}
	if !IsNil(o.ToName) {
		toSerialize["toName"] = o.ToName
	}
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	if !IsNil(o.TerminologyId) {
		toSerialize["terminologyId"] = o.TerminologyId
	}
	toSerialize["terminology"] = o.Terminology
	return toSerialize, nil
}

type NullableConceptRelationship struct {
	value *ConceptRelationship
	isSet bool
}

func (v NullableConceptRelationship) Get() *ConceptRelationship {
	return v.value
}

func (v *NullableConceptRelationship) Set(val *ConceptRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableConceptRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableConceptRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConceptRelationship(val *ConceptRelationship) *NullableConceptRelationship {
	return &NullableConceptRelationship{value: val, isSet: true}
}

func (v NullableConceptRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConceptRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


