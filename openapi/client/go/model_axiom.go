/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Axiom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Axiom{}

// Axiom the axioms associated with this concept
type Axiom struct {
	Code *string `json:"code,omitempty"`
	Value *string `json:"value,omitempty"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
}

// NewAxiom instantiates a new Axiom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAxiom(created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, terminology string) *Axiom {
	this := Axiom{}
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Terminology = terminology
	return &this
}

// NewAxiomWithDefaults instantiates a new Axiom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAxiomWithDefaults() *Axiom {
	this := Axiom{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Axiom) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Axiom) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Axiom) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Axiom) SetCode(v string) {
	o.Code = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Axiom) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Axiom) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Axiom) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Axiom) SetValue(v string) {
	o.Value = &v
}

// GetCreated returns the Created field value
func (o *Axiom) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Axiom) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Axiom) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Axiom) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Axiom) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Axiom) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Axiom) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Axiom) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Axiom) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Axiom) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Axiom) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Axiom) SetActive(v bool) {
	o.Active = v
}

// GetTerminology returns the Terminology field value
func (o *Axiom) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *Axiom) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *Axiom) SetTerminology(v string) {
	o.Terminology = v
}

func (o Axiom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Axiom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["terminology"] = o.Terminology
	return toSerialize, nil
}

type NullableAxiom struct {
	value *Axiom
	isSet bool
}

func (v NullableAxiom) Get() *Axiom {
	return v.value
}

func (v *NullableAxiom) Set(val *Axiom) {
	v.value = val
	v.isSet = true
}

func (v NullableAxiom) IsSet() bool {
	return v.isSet
}

func (v *NullableAxiom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAxiom(val *Axiom) *NullableAxiom {
	return &NullableAxiom{value: val, isSet: true}
}

func (v NullableAxiom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAxiom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


