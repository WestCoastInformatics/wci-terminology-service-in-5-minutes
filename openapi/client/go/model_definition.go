/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Definition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Definition{}

// Definition Represents a textual definition for a concept
type Definition struct {
	// the code in the specified terminology
	Code string `json:"code"`
	// a map of language codes to boolean values indicated whether this definition is preferred in that language context
	LocaleMap map[string]bool `json:"localeMap"`
	// the definition value itself
	Value string `json:"value"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
}

// NewDefinition instantiates a new Definition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinition(code string, localeMap map[string]bool, value string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, terminology string) *Definition {
	this := Definition{}
	this.Code = code
	this.LocaleMap = localeMap
	this.Value = value
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Terminology = terminology
	return &this
}

// NewDefinitionWithDefaults instantiates a new Definition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionWithDefaults() *Definition {
	this := Definition{}
	return &this
}

// GetCode returns the Code field value
func (o *Definition) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Definition) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Definition) SetCode(v string) {
	o.Code = v
}

// GetLocaleMap returns the LocaleMap field value
func (o *Definition) GetLocaleMap() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.LocaleMap
}

// GetLocaleMapOk returns a tuple with the LocaleMap field value
// and a boolean to check if the value has been set.
func (o *Definition) GetLocaleMapOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocaleMap, true
}

// SetLocaleMap sets field value
func (o *Definition) SetLocaleMap(v map[string]bool) {
	o.LocaleMap = v
}

// GetValue returns the Value field value
func (o *Definition) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Definition) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Definition) SetValue(v string) {
	o.Value = v
}

// GetCreated returns the Created field value
func (o *Definition) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Definition) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Definition) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Definition) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Definition) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Definition) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Definition) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Definition) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Definition) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Definition) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Definition) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Definition) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Definition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Definition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Definition) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Definition) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Definition) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Definition) SetActive(v bool) {
	o.Active = v
}

// GetTerminology returns the Terminology field value
func (o *Definition) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *Definition) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *Definition) SetTerminology(v string) {
	o.Terminology = v
}

func (o Definition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Definition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["localeMap"] = o.LocaleMap
	toSerialize["value"] = o.Value
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["terminology"] = o.Terminology
	return toSerialize, nil
}

type NullableDefinition struct {
	value *Definition
	isSet bool
}

func (v NullableDefinition) Get() *Definition {
	return v.value
}

func (v *NullableDefinition) Set(val *Definition) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinition(val *Definition) *NullableDefinition {
	return &NullableDefinition{value: val, isSet: true}
}

func (v NullableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


