/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Atom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Atom{}

// Atom Represents a name with a term type that contributes meaning to a concept
type Atom struct {
	// the code in the specified terminology
	CodeId string `json:"codeId"`
	// a map of language codes to boolean values indicated whether this definition is preferred in that language context
	LocaleMap map[string]bool `json:"localeMap"`
	// the concept id (for terminologies that use concepts)
	ConceptId *string `json:"conceptId,omitempty"`
	// the descriptor id (for terminologies that use descriptors)
	DescriptorId *string `json:"descriptorId,omitempty"`
	// the term type
	TermType string `json:"termType"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the name
	Name string `json:"name"`
	// the identifier asserted by the terminology
	TerminologyId *string `json:"terminologyId,omitempty"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
	// key/value pairs associated with this object. Entries in this map are terminology-specific
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewAtom instantiates a new Atom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtom(codeId string, localeMap map[string]bool, termType string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, name string, terminology string) *Atom {
	this := Atom{}
	this.CodeId = codeId
	this.LocaleMap = localeMap
	this.TermType = termType
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Name = name
	this.Terminology = terminology
	return &this
}

// NewAtomWithDefaults instantiates a new Atom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtomWithDefaults() *Atom {
	this := Atom{}
	return &this
}

// GetCodeId returns the CodeId field value
func (o *Atom) GetCodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CodeId
}

// GetCodeIdOk returns a tuple with the CodeId field value
// and a boolean to check if the value has been set.
func (o *Atom) GetCodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CodeId, true
}

// SetCodeId sets field value
func (o *Atom) SetCodeId(v string) {
	o.CodeId = v
}

// GetLocaleMap returns the LocaleMap field value
func (o *Atom) GetLocaleMap() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.LocaleMap
}

// GetLocaleMapOk returns a tuple with the LocaleMap field value
// and a boolean to check if the value has been set.
func (o *Atom) GetLocaleMapOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocaleMap, true
}

// SetLocaleMap sets field value
func (o *Atom) SetLocaleMap(v map[string]bool) {
	o.LocaleMap = v
}

// GetConceptId returns the ConceptId field value if set, zero value otherwise.
func (o *Atom) GetConceptId() string {
	if o == nil || IsNil(o.ConceptId) {
		var ret string
		return ret
	}
	return *o.ConceptId
}

// GetConceptIdOk returns a tuple with the ConceptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Atom) GetConceptIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConceptId) {
		return nil, false
	}
	return o.ConceptId, true
}

// HasConceptId returns a boolean if a field has been set.
func (o *Atom) HasConceptId() bool {
	if o != nil && !IsNil(o.ConceptId) {
		return true
	}

	return false
}

// SetConceptId gets a reference to the given string and assigns it to the ConceptId field.
func (o *Atom) SetConceptId(v string) {
	o.ConceptId = &v
}

// GetDescriptorId returns the DescriptorId field value if set, zero value otherwise.
func (o *Atom) GetDescriptorId() string {
	if o == nil || IsNil(o.DescriptorId) {
		var ret string
		return ret
	}
	return *o.DescriptorId
}

// GetDescriptorIdOk returns a tuple with the DescriptorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Atom) GetDescriptorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptorId) {
		return nil, false
	}
	return o.DescriptorId, true
}

// HasDescriptorId returns a boolean if a field has been set.
func (o *Atom) HasDescriptorId() bool {
	if o != nil && !IsNil(o.DescriptorId) {
		return true
	}

	return false
}

// SetDescriptorId gets a reference to the given string and assigns it to the DescriptorId field.
func (o *Atom) SetDescriptorId(v string) {
	o.DescriptorId = &v
}

// GetTermType returns the TermType field value
func (o *Atom) GetTermType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TermType
}

// GetTermTypeOk returns a tuple with the TermType field value
// and a boolean to check if the value has been set.
func (o *Atom) GetTermTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermType, true
}

// SetTermType sets field value
func (o *Atom) SetTermType(v string) {
	o.TermType = v
}

// GetCreated returns the Created field value
func (o *Atom) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Atom) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Atom) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Atom) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Atom) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Atom) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Atom) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Atom) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Atom) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Atom) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Atom) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Atom) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Atom) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Atom) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Atom) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Atom) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Atom) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Atom) SetActive(v bool) {
	o.Active = v
}

// GetName returns the Name field value
func (o *Atom) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Atom) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Atom) SetName(v string) {
	o.Name = v
}

// GetTerminologyId returns the TerminologyId field value if set, zero value otherwise.
func (o *Atom) GetTerminologyId() string {
	if o == nil || IsNil(o.TerminologyId) {
		var ret string
		return ret
	}
	return *o.TerminologyId
}

// GetTerminologyIdOk returns a tuple with the TerminologyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Atom) GetTerminologyIdOk() (*string, bool) {
	if o == nil || IsNil(o.TerminologyId) {
		return nil, false
	}
	return o.TerminologyId, true
}

// HasTerminologyId returns a boolean if a field has been set.
func (o *Atom) HasTerminologyId() bool {
	if o != nil && !IsNil(o.TerminologyId) {
		return true
	}

	return false
}

// SetTerminologyId gets a reference to the given string and assigns it to the TerminologyId field.
func (o *Atom) SetTerminologyId(v string) {
	o.TerminologyId = &v
}

// GetTerminology returns the Terminology field value
func (o *Atom) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *Atom) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *Atom) SetTerminology(v string) {
	o.Terminology = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Atom) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Atom) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Atom) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Atom) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Atom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Atom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["codeId"] = o.CodeId
	toSerialize["localeMap"] = o.LocaleMap
	if !IsNil(o.ConceptId) {
		toSerialize["conceptId"] = o.ConceptId
	}
	if !IsNil(o.DescriptorId) {
		toSerialize["descriptorId"] = o.DescriptorId
	}
	toSerialize["termType"] = o.TermType
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["name"] = o.Name
	if !IsNil(o.TerminologyId) {
		toSerialize["terminologyId"] = o.TerminologyId
	}
	toSerialize["terminology"] = o.Terminology
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableAtom struct {
	value *Atom
	isSet bool
}

func (v NullableAtom) Get() *Atom {
	return v.value
}

func (v *NullableAtom) Set(val *Atom) {
	v.value = val
	v.isSet = true
}

func (v NullableAtom) IsSet() bool {
	return v.isSet
}

func (v *NullableAtom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtom(val *Atom) *NullableAtom {
	return &NullableAtom{value: val, isSet: true}
}

func (v NullableAtom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


