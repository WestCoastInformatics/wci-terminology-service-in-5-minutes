/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ConceptTreePosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConceptTreePosition{}

// ConceptTreePosition Represents a concept position in a hierarchical tree with a path to the root
type ConceptTreePosition struct {
	// the child tree positions of this node
	Children []ConceptTreePosition `json:"children,omitempty"`
	// the level of depth in the hierarchy of this node
	Level *int32 `json:"level,omitempty"`
	// the path from the root code expressed as a sequence of dot (.) separated code values starting with the root and ending with the parent code
	AncestorPath *string `json:"ancestorPath,omitempty"`
	// the code in the specified terminology
	Code string `json:"code"`
	// the more specific type of relationship (more information about this label is provided in the terminology metadata)
	AdditionalType *string `json:"additionalType,omitempty"`
	// the child count of this node
	ChildCt *int32 `json:"childCt,omitempty"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the name
	Name string `json:"name"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
}

// NewConceptTreePosition instantiates a new ConceptTreePosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConceptTreePosition(code string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, name string, terminology string) *ConceptTreePosition {
	this := ConceptTreePosition{}
	this.Code = code
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Name = name
	this.Terminology = terminology
	return &this
}

// NewConceptTreePositionWithDefaults instantiates a new ConceptTreePosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptTreePositionWithDefaults() *ConceptTreePosition {
	this := ConceptTreePosition{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ConceptTreePosition) GetChildren() []ConceptTreePosition {
	if o == nil || IsNil(o.Children) {
		var ret []ConceptTreePosition
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetChildrenOk() ([]ConceptTreePosition, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ConceptTreePosition) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []ConceptTreePosition and assigns it to the Children field.
func (o *ConceptTreePosition) SetChildren(v []ConceptTreePosition) {
	o.Children = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ConceptTreePosition) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ConceptTreePosition) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *ConceptTreePosition) SetLevel(v int32) {
	o.Level = &v
}

// GetAncestorPath returns the AncestorPath field value if set, zero value otherwise.
func (o *ConceptTreePosition) GetAncestorPath() string {
	if o == nil || IsNil(o.AncestorPath) {
		var ret string
		return ret
	}
	return *o.AncestorPath
}

// GetAncestorPathOk returns a tuple with the AncestorPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetAncestorPathOk() (*string, bool) {
	if o == nil || IsNil(o.AncestorPath) {
		return nil, false
	}
	return o.AncestorPath, true
}

// HasAncestorPath returns a boolean if a field has been set.
func (o *ConceptTreePosition) HasAncestorPath() bool {
	if o != nil && !IsNil(o.AncestorPath) {
		return true
	}

	return false
}

// SetAncestorPath gets a reference to the given string and assigns it to the AncestorPath field.
func (o *ConceptTreePosition) SetAncestorPath(v string) {
	o.AncestorPath = &v
}

// GetCode returns the Code field value
func (o *ConceptTreePosition) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ConceptTreePosition) SetCode(v string) {
	o.Code = v
}

// GetAdditionalType returns the AdditionalType field value if set, zero value otherwise.
func (o *ConceptTreePosition) GetAdditionalType() string {
	if o == nil || IsNil(o.AdditionalType) {
		var ret string
		return ret
	}
	return *o.AdditionalType
}

// GetAdditionalTypeOk returns a tuple with the AdditionalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetAdditionalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalType) {
		return nil, false
	}
	return o.AdditionalType, true
}

// HasAdditionalType returns a boolean if a field has been set.
func (o *ConceptTreePosition) HasAdditionalType() bool {
	if o != nil && !IsNil(o.AdditionalType) {
		return true
	}

	return false
}

// SetAdditionalType gets a reference to the given string and assigns it to the AdditionalType field.
func (o *ConceptTreePosition) SetAdditionalType(v string) {
	o.AdditionalType = &v
}

// GetChildCt returns the ChildCt field value if set, zero value otherwise.
func (o *ConceptTreePosition) GetChildCt() int32 {
	if o == nil || IsNil(o.ChildCt) {
		var ret int32
		return ret
	}
	return *o.ChildCt
}

// GetChildCtOk returns a tuple with the ChildCt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetChildCtOk() (*int32, bool) {
	if o == nil || IsNil(o.ChildCt) {
		return nil, false
	}
	return o.ChildCt, true
}

// HasChildCt returns a boolean if a field has been set.
func (o *ConceptTreePosition) HasChildCt() bool {
	if o != nil && !IsNil(o.ChildCt) {
		return true
	}

	return false
}

// SetChildCt gets a reference to the given int32 and assigns it to the ChildCt field.
func (o *ConceptTreePosition) SetChildCt(v int32) {
	o.ChildCt = &v
}

// GetCreated returns the Created field value
func (o *ConceptTreePosition) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ConceptTreePosition) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *ConceptTreePosition) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *ConceptTreePosition) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *ConceptTreePosition) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *ConceptTreePosition) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *ConceptTreePosition) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *ConceptTreePosition) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *ConceptTreePosition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConceptTreePosition) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *ConceptTreePosition) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ConceptTreePosition) SetActive(v bool) {
	o.Active = v
}

// GetName returns the Name field value
func (o *ConceptTreePosition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConceptTreePosition) SetName(v string) {
	o.Name = v
}

// GetTerminology returns the Terminology field value
func (o *ConceptTreePosition) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *ConceptTreePosition) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *ConceptTreePosition) SetTerminology(v string) {
	o.Terminology = v
}

func (o ConceptTreePosition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConceptTreePosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.AncestorPath) {
		toSerialize["ancestorPath"] = o.AncestorPath
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.AdditionalType) {
		toSerialize["additionalType"] = o.AdditionalType
	}
	if !IsNil(o.ChildCt) {
		toSerialize["childCt"] = o.ChildCt
	}
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["name"] = o.Name
	toSerialize["terminology"] = o.Terminology
	return toSerialize, nil
}

type NullableConceptTreePosition struct {
	value *ConceptTreePosition
	isSet bool
}

func (v NullableConceptTreePosition) Get() *ConceptTreePosition {
	return v.value
}

func (v *NullableConceptTreePosition) Set(val *ConceptTreePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableConceptTreePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableConceptTreePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConceptTreePosition(val *ConceptTreePosition) *NullableConceptTreePosition {
	return &NullableConceptTreePosition{value: val, isSet: true}
}

func (v NullableConceptTreePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConceptTreePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


