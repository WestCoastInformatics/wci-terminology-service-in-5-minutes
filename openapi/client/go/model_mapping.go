/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Mapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mapping{}

// Mapping Represents a mapping from a concept in one terminology to a concept in another
type Mapping struct {
	// the value for the group this map participates in (for complex maps that use groups)
	Group *string `json:"group,omitempty"`
	// the map category (for RF2-based maps)
	Category *string `json:"category,omitempty"`
	// the terminology of the 'from' code
	FromTerminology string `json:"fromTerminology"`
	// the 'from' code (the left-hand side)
	FromCode string `json:"fromCode"`
	// the terminology of the 'to' code
	ToTerminology string `json:"toTerminology"`
	// the 'to' code (the left-hand side)
	ToCode string `json:"toCode"`
	// the name of the 'from' code
	FromName string `json:"fromName"`
	// the name of the 'to' code
	ToName string `json:"toName"`
	// the machine-readable map rule for this mapping (for complex maps that use rules)
	Rule *string `json:"rule,omitempty"`
	// the code of the mapset containing this mapping
	MapsetCode string `json:"mapsetCode"`
	// the map advice
	Advice *string `json:"advice,omitempty"`
	// the value for the priority of this map within its group (for complex maps that use groups)
	Priority *string `json:"priority,omitempty"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// key/value pairs associated with this object. Entries in this map are terminology-specific
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewMapping instantiates a new Mapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapping(fromTerminology string, fromCode string, toTerminology string, toCode string, fromName string, toName string, mapsetCode string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool) *Mapping {
	this := Mapping{}
	this.FromTerminology = fromTerminology
	this.FromCode = fromCode
	this.ToTerminology = toTerminology
	this.ToCode = toCode
	this.FromName = fromName
	this.ToName = toName
	this.MapsetCode = mapsetCode
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	return &this
}

// NewMappingWithDefaults instantiates a new Mapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingWithDefaults() *Mapping {
	this := Mapping{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Mapping) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Mapping) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *Mapping) SetGroup(v string) {
	o.Group = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Mapping) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Mapping) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Mapping) SetCategory(v string) {
	o.Category = &v
}

// GetFromTerminology returns the FromTerminology field value
func (o *Mapping) GetFromTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromTerminology
}

// GetFromTerminologyOk returns a tuple with the FromTerminology field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetFromTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromTerminology, true
}

// SetFromTerminology sets field value
func (o *Mapping) SetFromTerminology(v string) {
	o.FromTerminology = v
}

// GetFromCode returns the FromCode field value
func (o *Mapping) GetFromCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromCode
}

// GetFromCodeOk returns a tuple with the FromCode field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetFromCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromCode, true
}

// SetFromCode sets field value
func (o *Mapping) SetFromCode(v string) {
	o.FromCode = v
}

// GetToTerminology returns the ToTerminology field value
func (o *Mapping) GetToTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToTerminology
}

// GetToTerminologyOk returns a tuple with the ToTerminology field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetToTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToTerminology, true
}

// SetToTerminology sets field value
func (o *Mapping) SetToTerminology(v string) {
	o.ToTerminology = v
}

// GetToCode returns the ToCode field value
func (o *Mapping) GetToCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCode
}

// GetToCodeOk returns a tuple with the ToCode field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetToCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToCode, true
}

// SetToCode sets field value
func (o *Mapping) SetToCode(v string) {
	o.ToCode = v
}

// GetFromName returns the FromName field value
func (o *Mapping) GetFromName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromName
}

// GetFromNameOk returns a tuple with the FromName field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetFromNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromName, true
}

// SetFromName sets field value
func (o *Mapping) SetFromName(v string) {
	o.FromName = v
}

// GetToName returns the ToName field value
func (o *Mapping) GetToName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToName
}

// GetToNameOk returns a tuple with the ToName field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetToNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToName, true
}

// SetToName sets field value
func (o *Mapping) SetToName(v string) {
	o.ToName = v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *Mapping) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *Mapping) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *Mapping) SetRule(v string) {
	o.Rule = &v
}

// GetMapsetCode returns the MapsetCode field value
func (o *Mapping) GetMapsetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapsetCode
}

// GetMapsetCodeOk returns a tuple with the MapsetCode field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetMapsetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapsetCode, true
}

// SetMapsetCode sets field value
func (o *Mapping) SetMapsetCode(v string) {
	o.MapsetCode = v
}

// GetAdvice returns the Advice field value if set, zero value otherwise.
func (o *Mapping) GetAdvice() string {
	if o == nil || IsNil(o.Advice) {
		var ret string
		return ret
	}
	return *o.Advice
}

// GetAdviceOk returns a tuple with the Advice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetAdviceOk() (*string, bool) {
	if o == nil || IsNil(o.Advice) {
		return nil, false
	}
	return o.Advice, true
}

// HasAdvice returns a boolean if a field has been set.
func (o *Mapping) HasAdvice() bool {
	if o != nil && !IsNil(o.Advice) {
		return true
	}

	return false
}

// SetAdvice gets a reference to the given string and assigns it to the Advice field.
func (o *Mapping) SetAdvice(v string) {
	o.Advice = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Mapping) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Mapping) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Mapping) SetPriority(v string) {
	o.Priority = &v
}

// GetCreated returns the Created field value
func (o *Mapping) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Mapping) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Mapping) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Mapping) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Mapping) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Mapping) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Mapping) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Mapping) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Mapping) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Mapping) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Mapping) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Mapping) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Mapping) SetActive(v bool) {
	o.Active = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Mapping) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Mapping) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Mapping) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Mapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["fromTerminology"] = o.FromTerminology
	toSerialize["fromCode"] = o.FromCode
	toSerialize["toTerminology"] = o.ToTerminology
	toSerialize["toCode"] = o.ToCode
	toSerialize["fromName"] = o.FromName
	toSerialize["toName"] = o.ToName
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	toSerialize["mapsetCode"] = o.MapsetCode
	if !IsNil(o.Advice) {
		toSerialize["advice"] = o.Advice
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableMapping struct {
	value *Mapping
	isSet bool
}

func (v NullableMapping) Get() *Mapping {
	return v.value
}

func (v *NullableMapping) Set(val *Mapping) {
	v.value = val
	v.isSet = true
}

func (v NullableMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapping(val *Mapping) *NullableMapping {
	return &NullableMapping{value: val, isSet: true}
}

func (v NullableMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


