/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Mapset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mapset{}

// Mapset Represents a set of mappings from a concept in one terminology to a concept in another
type Mapset struct {
	// the code in the specified terminology
	Code string `json:"code"`
	// the target terminology of this map set
	MappedToTerminology string `json:"mappedToTerminology"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// the name
	Name string `json:"name"`
	// the terminology abbreviation
	Terminology string `json:"terminology"`
	// key/value pairs associated with this object. Entries in this map are terminology-specific
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewMapset instantiates a new Mapset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapset(code string, mappedToTerminology string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool, name string, terminology string) *Mapset {
	this := Mapset{}
	this.Code = code
	this.MappedToTerminology = mappedToTerminology
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	this.Name = name
	this.Terminology = terminology
	return &this
}

// NewMapsetWithDefaults instantiates a new Mapset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapsetWithDefaults() *Mapset {
	this := Mapset{}
	return &this
}

// GetCode returns the Code field value
func (o *Mapset) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Mapset) SetCode(v string) {
	o.Code = v
}

// GetMappedToTerminology returns the MappedToTerminology field value
func (o *Mapset) GetMappedToTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MappedToTerminology
}

// GetMappedToTerminologyOk returns a tuple with the MappedToTerminology field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetMappedToTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MappedToTerminology, true
}

// SetMappedToTerminology sets field value
func (o *Mapset) SetMappedToTerminology(v string) {
	o.MappedToTerminology = v
}

// GetCreated returns the Created field value
func (o *Mapset) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Mapset) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Mapset) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Mapset) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Mapset) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Mapset) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Mapset) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Mapset) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Mapset) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Mapset) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Mapset) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Mapset) SetActive(v bool) {
	o.Active = v
}

// GetName returns the Name field value
func (o *Mapset) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Mapset) SetName(v string) {
	o.Name = v
}

// GetTerminology returns the Terminology field value
func (o *Mapset) GetTerminology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Terminology
}

// GetTerminologyOk returns a tuple with the Terminology field value
// and a boolean to check if the value has been set.
func (o *Mapset) GetTerminologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terminology, true
}

// SetTerminology sets field value
func (o *Mapset) SetTerminology(v string) {
	o.Terminology = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Mapset) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapset) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Mapset) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Mapset) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Mapset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mapset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["mappedToTerminology"] = o.MappedToTerminology
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["name"] = o.Name
	toSerialize["terminology"] = o.Terminology
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableMapset struct {
	value *Mapset
	isSet bool
}

func (v NullableMapset) Get() *Mapset {
	return v.value
}

func (v *NullableMapset) Set(val *Mapset) {
	v.value = val
	v.isSet = true
}

func (v NullableMapset) IsSet() bool {
	return v.isSet
}

func (v *NullableMapset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapset(val *Mapset) *NullableMapset {
	return &NullableMapset{value: val, isSet: true}
}

func (v NullableMapset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


