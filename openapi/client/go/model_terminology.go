/*
West Coast Informatics Terminology API

API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

API version: 1.0.0
Contact: info@westcoastinformatics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Terminology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Terminology{}

// Terminology Represents a terminology abbreviation and associated metadata
type Terminology struct {
	// the terminology version
	Version string `json:"version"`
	// the terminology abbreviation
	Abbreviation string `json:"abbreviation"`
	// the OID for the terminology
	SystemOid *string `json:"systemOid,omitempty"`
	// the FHIR system URI for the terminology
	SystemUri *string `json:"systemUri,omitempty"`
	// indicates whether ECL-style expressions can be used when searching the terminology
	ExpressionEnabled bool `json:"expressionEnabled"`
	// the name
	Name string `json:"name"`
	// the created date
	Created time.Time `json:"created"`
	// indicates whether this data element was created by local editing
	Local bool `json:"local"`
	// the identifier of the user who made the last modification
	ModifiedBy string `json:"modifiedBy"`
	// the last modified date
	Modified time.Time `json:"modified"`
	// the unique identifier
	Id string `json:"id"`
	// indicates whether or not this data element is active
	Active bool `json:"active"`
	// key/value pairs associated with this object. Entries in this map are terminology-specific
	Attributes *map[string]string `json:"attributes,omitempty"`
}

// NewTerminology instantiates a new Terminology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminology(version string, abbreviation string, expressionEnabled bool, name string, created time.Time, local bool, modifiedBy string, modified time.Time, id string, active bool) *Terminology {
	this := Terminology{}
	this.Version = version
	this.Abbreviation = abbreviation
	this.ExpressionEnabled = expressionEnabled
	this.Name = name
	this.Created = created
	this.Local = local
	this.ModifiedBy = modifiedBy
	this.Modified = modified
	this.Id = id
	this.Active = active
	return &this
}

// NewTerminologyWithDefaults instantiates a new Terminology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminologyWithDefaults() *Terminology {
	this := Terminology{}
	return &this
}

// GetVersion returns the Version field value
func (o *Terminology) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Terminology) SetVersion(v string) {
	o.Version = v
}

// GetAbbreviation returns the Abbreviation field value
func (o *Terminology) GetAbbreviation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetAbbreviationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abbreviation, true
}

// SetAbbreviation sets field value
func (o *Terminology) SetAbbreviation(v string) {
	o.Abbreviation = v
}

// GetSystemOid returns the SystemOid field value if set, zero value otherwise.
func (o *Terminology) GetSystemOid() string {
	if o == nil || IsNil(o.SystemOid) {
		var ret string
		return ret
	}
	return *o.SystemOid
}

// GetSystemOidOk returns a tuple with the SystemOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetSystemOidOk() (*string, bool) {
	if o == nil || IsNil(o.SystemOid) {
		return nil, false
	}
	return o.SystemOid, true
}

// HasSystemOid returns a boolean if a field has been set.
func (o *Terminology) HasSystemOid() bool {
	if o != nil && !IsNil(o.SystemOid) {
		return true
	}

	return false
}

// SetSystemOid gets a reference to the given string and assigns it to the SystemOid field.
func (o *Terminology) SetSystemOid(v string) {
	o.SystemOid = &v
}

// GetSystemUri returns the SystemUri field value if set, zero value otherwise.
func (o *Terminology) GetSystemUri() string {
	if o == nil || IsNil(o.SystemUri) {
		var ret string
		return ret
	}
	return *o.SystemUri
}

// GetSystemUriOk returns a tuple with the SystemUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetSystemUriOk() (*string, bool) {
	if o == nil || IsNil(o.SystemUri) {
		return nil, false
	}
	return o.SystemUri, true
}

// HasSystemUri returns a boolean if a field has been set.
func (o *Terminology) HasSystemUri() bool {
	if o != nil && !IsNil(o.SystemUri) {
		return true
	}

	return false
}

// SetSystemUri gets a reference to the given string and assigns it to the SystemUri field.
func (o *Terminology) SetSystemUri(v string) {
	o.SystemUri = &v
}

// GetExpressionEnabled returns the ExpressionEnabled field value
func (o *Terminology) GetExpressionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExpressionEnabled
}

// GetExpressionEnabledOk returns a tuple with the ExpressionEnabled field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetExpressionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpressionEnabled, true
}

// SetExpressionEnabled sets field value
func (o *Terminology) SetExpressionEnabled(v bool) {
	o.ExpressionEnabled = v
}

// GetName returns the Name field value
func (o *Terminology) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Terminology) SetName(v string) {
	o.Name = v
}

// GetCreated returns the Created field value
func (o *Terminology) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Terminology) SetCreated(v time.Time) {
	o.Created = v
}

// GetLocal returns the Local field value
func (o *Terminology) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Terminology) SetLocal(v bool) {
	o.Local = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Terminology) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Terminology) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModified returns the Modified field value
func (o *Terminology) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Terminology) SetModified(v time.Time) {
	o.Modified = v
}

// GetId returns the Id field value
func (o *Terminology) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Terminology) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *Terminology) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Terminology) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Terminology) SetActive(v bool) {
	o.Active = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Terminology) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Terminology) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Terminology) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Terminology) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Terminology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Terminology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["abbreviation"] = o.Abbreviation
	if !IsNil(o.SystemOid) {
		toSerialize["systemOid"] = o.SystemOid
	}
	if !IsNil(o.SystemUri) {
		toSerialize["systemUri"] = o.SystemUri
	}
	toSerialize["expressionEnabled"] = o.ExpressionEnabled
	toSerialize["name"] = o.Name
	toSerialize["created"] = o.Created
	toSerialize["local"] = o.Local
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modified"] = o.Modified
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableTerminology struct {
	value *Terminology
	isSet bool
}

func (v NullableTerminology) Get() *Terminology {
	return v.value
}

func (v *NullableTerminology) Set(val *Terminology) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminology) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminology(val *Terminology) *NullableTerminology {
	return &NullableTerminology{value: val, isSet: true}
}

func (v NullableTerminology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


