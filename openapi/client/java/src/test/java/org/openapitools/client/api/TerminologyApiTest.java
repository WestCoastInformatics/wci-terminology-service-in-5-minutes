/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Atom;
import org.openapitools.client.model.Concept;
import org.openapitools.client.model.ConceptTreePosition;
import org.openapitools.client.model.Mapset;
import org.openapitools.client.model.ResultListConcept;
import org.openapitools.client.model.ResultListConceptRelationship;
import org.openapitools.client.model.ResultListConceptTreePosition;
import org.openapitools.client.model.ResultListMapping;
import org.openapitools.client.model.ResultListMapset;
import org.openapitools.client.model.ResultListSubset;
import org.openapitools.client.model.Subset;
import org.openapitools.client.model.Terminology;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TerminologyApi
 */
@Disabled
public class TerminologyApiTest {

    private final TerminologyApi api = new TerminologyApi();

    /**
     * Add synonym
     *
     * Add synonym with specified parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSynonymTest() throws ApiException {
        String terminology = null;
        String code = null;
        String name = null;
        String termType = null;
        Map<String, String> requestBody = null;
        Atom response = api.addSynonym(terminology, code, name, termType, requestBody);
        // TODO: test validations
    }

    /**
     * Autocomplete
     *
     * Find concepts for a type-ahead search field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autocompleteConcepts1Test() throws ApiException {
        String terminology = null;
        String query = null;
        String expression = null;
        String clause = null;
        Integer limit = null;
        ResultListConcept response = api.autocompleteConcepts1(terminology, query, expression, clause, limit);
        // TODO: test validations
    }

    /**
     * Find concepts
     *
     * Find concepts matching the specified search criteria
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConceptsTest() throws ApiException {
        String terminology = null;
        String query = null;
        String expression = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        String handler = null;
        String resolver = null;
        Boolean active = null;
        Boolean leaf = null;
        ResultListConcept response = api.findConcepts(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf);
        // TODO: test validations
    }

    /**
     * Find concepts (across all terminologies)
     *
     * Find concepts matching the specified search criteria
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConcepts2Test() throws ApiException {
        String query = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        String handler = null;
        String resolver = null;
        Boolean active = null;
        Boolean leaf = null;
        ResultListConcept response = api.findConcepts2(query, offset, limit, ascending, sort, handler, resolver, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mappings
     *
     * Find mappings for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMappings1Test() throws ApiException {
        String terminology = null;
        String code = null;
        String query = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        ResultListMapping response = api.findMappings1(terminology, code, query, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Get concept subset memberships
     *
     * Get subsets that the specified terminology and code are a member of
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSubsetMemberships1Test() throws ApiException {
        String terminology = null;
        String code = null;
        ResultListSubset response = api.findSubsetMemberships1(terminology, code);
        // TODO: test validations
    }

    /**
     * Find tree position children
     *
     * Find the child tree position nodes for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTreePositionChildren1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        ResultListConceptTreePosition response = api.findTreePositionChildren1(terminology, code, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Find tree positions
     *
     * Find tree positions for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTreePositions1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        ResultListConceptTreePosition response = api.findTreePositions1(terminology, code, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Get concept
     *
     * Get concept object for the specified terminology, code, and resolver
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConcept1Test() throws ApiException {
        String terminology = null;
        String code = null;
        String resolver = null;
        Concept response = api.getConcept1(terminology, code, resolver);
        // TODO: test validations
    }

    /**
     * Get concept mappings
     *
     * Get mappings that the specified terminology and code are mapped from
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptMappings1Test() throws ApiException {
        String terminology = null;
        String code = null;
        ResultListMapping response = api.getConceptMappings1(terminology, code);
        // TODO: test validations
    }

    /**
     * Get properties
     *
     * Get configuration information used to drive certain UI functionality
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigProperties1Test() throws ApiException {
        api.getConfigProperties1();
        // TODO: test validations
    }

    /**
     * Get mapset
     *
     * Get mapsets for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapset1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Mapset response = api.getMapset1(terminology, code);
        // TODO: test validations
    }

    /**
     * Get mapsets
     *
     * Get all mapsets for the specified terminology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapsets1Test() throws ApiException {
        String terminology = null;
        ResultListMapset response = api.getMapsets1(terminology);
        // TODO: test validations
    }

    /**
     * Get concept relationships
     *
     * Get relationships for for specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationships1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Integer offset = null;
        Integer limit = null;
        Boolean ascending = null;
        String sort = null;
        Boolean inverse = null;
        Boolean active = null;
        String filter = null;
        ResultListConceptRelationship response = api.getRelationships1(terminology, code, offset, limit, ascending, sort, inverse, active, filter);
        // TODO: test validations
    }

    /**
     * Get subset
     *
     * Get subsets for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubset1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Subset response = api.getSubset1(terminology, code);
        // TODO: test validations
    }

    /**
     * Get subsets
     *
     * Get all subsets for the specified terminology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubsets1Test() throws ApiException {
        String terminology = null;
        ResultListSubset response = api.getSubsets1(terminology);
        // TODO: test validations
    }

    /**
     * Get subtree
     *
     * Get the subtree for the specified terminology and code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtree1Test() throws ApiException {
        String terminology = null;
        String code = null;
        Integer maxLevel = null;
        ConceptTreePosition response = api.getSubtree1(terminology, code, maxLevel);
        // TODO: test validations
    }

    /**
     * Get terminologies
     *
     * Get all terminologies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminologies1Test() throws ApiException {
        List<Terminology> response = api.getTerminologies1();
        // TODO: test validations
    }

    /**
     * Get terminology
     *
     * Get terminology object for the specified terminology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminology1Test() throws ApiException {
        String terminology = null;
        Terminology response = api.getTerminology1(terminology);
        // TODO: test validations
    }

    /**
     * Get terminology metadata
     *
     * Get map of terminology abbreviations to metadata for specified terminology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminologyMetadata1Test() throws ApiException {
        String terminology = null;
        api.getTerminologyMetadata1(terminology);
        // TODO: test validations
    }

    /**
     * Resolve expression
     *
     * Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see &lt;a href&#x3D;\&quot;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\&quot;&gt;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveExpression1Test() throws ApiException {
        String terminology = null;
        String expression = null;
        List<String> response = api.resolveExpression1(terminology, expression);
        // TODO: test validations
    }

}
