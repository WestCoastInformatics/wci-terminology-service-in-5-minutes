/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Atom;
import org.openapitools.client.model.Concept;
import org.openapitools.client.model.ConceptTreePosition;
import org.openapitools.client.model.Mapset;
import org.openapitools.client.model.ResultListConcept;
import org.openapitools.client.model.ResultListConceptRelationship;
import org.openapitools.client.model.ResultListConceptTreePosition;
import org.openapitools.client.model.ResultListMapping;
import org.openapitools.client.model.ResultListMapset;
import org.openapitools.client.model.ResultListSubset;
import org.openapitools.client.model.Subset;
import org.openapitools.client.model.Terminology;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TerminologyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TerminologyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TerminologyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSynonym
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code code, e.g. 80891009 (required)
     * @param name synonym name, e.g. \&quot;test name\&quot; (optional)
     * @param termType term type, e.g. INDEX_SY (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Synonym added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSynonymCall(String terminology, String code, String name, String termType, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/atom"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (termType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termType", termType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSynonymValidateBeforeCall(String terminology, String code, String name, String termType, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling addSynonym(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addSynonym(Async)");
        }

        return addSynonymCall(terminology, code, name, termType, requestBody, _callback);

    }

    /**
     * Add synonym
     * Add synonym with specified parameters
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code code, e.g. 80891009 (required)
     * @param name synonym name, e.g. \&quot;test name\&quot; (optional)
     * @param termType term type, e.g. INDEX_SY (optional)
     * @param requestBody  (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Synonym added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Atom addSynonym(String terminology, String code, String name, String termType, Map<String, String> requestBody) throws ApiException {
        ApiResponse<Atom> localVarResp = addSynonymWithHttpInfo(terminology, code, name, termType, requestBody);
        return localVarResp.getData();
    }

    /**
     * Add synonym
     * Add synonym with specified parameters
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code code, e.g. 80891009 (required)
     * @param name synonym name, e.g. \&quot;test name\&quot; (optional)
     * @param termType term type, e.g. INDEX_SY (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Synonym added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> addSynonymWithHttpInfo(String terminology, String code, String name, String termType, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addSynonymValidateBeforeCall(terminology, code, name, termType, requestBody, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add synonym (asynchronously)
     * Add synonym with specified parameters
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code code, e.g. 80891009 (required)
     * @param name synonym name, e.g. \&quot;test name\&quot; (optional)
     * @param termType term type, e.g. INDEX_SY (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Synonym added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSynonymAsync(String terminology, String code, String name, String termType, Map<String, String> requestBody, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSynonymValidateBeforeCall(terminology, code, name, termType, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteConcepts1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query  (optional)
     * @param expression  (optional)
     * @param clause  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteConcepts1Call(String terminology, String query, String expression, String clause, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/autocomplete"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (clause != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clause", clause));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteConcepts1ValidateBeforeCall(String terminology, String query, String expression, String clause, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling autocompleteConcepts1(Async)");
        }

        return autocompleteConcepts1Call(terminology, query, expression, clause, limit, _callback);

    }

    /**
     * Autocomplete
     * Find concepts for a type-ahead search field
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query  (optional)
     * @param expression  (optional)
     * @param clause  (optional)
     * @param limit  (optional)
     * @return ResultListConcept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConcept autocompleteConcepts1(String terminology, String query, String expression, String clause, Integer limit) throws ApiException {
        ApiResponse<ResultListConcept> localVarResp = autocompleteConcepts1WithHttpInfo(terminology, query, expression, clause, limit);
        return localVarResp.getData();
    }

    /**
     * Autocomplete
     * Find concepts for a type-ahead search field
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query  (optional)
     * @param expression  (optional)
     * @param clause  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;ResultListConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConcept> autocompleteConcepts1WithHttpInfo(String terminology, String query, String expression, String clause, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = autocompleteConcepts1ValidateBeforeCall(terminology, query, expression, clause, limit, null);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete (asynchronously)
     * Find concepts for a type-ahead search field
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query  (optional)
     * @param expression  (optional)
     * @param clause  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteConcepts1Async(String terminology, String query, String expression, String clause, Integer limit, final ApiCallback<ResultListConcept> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteConcepts1ValidateBeforeCall(terminology, query, expression, clause, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findConcepts
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param expression ECL Expression, e.g. &lt;&lt;80891009 (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findConceptsCall(String terminology, String query, String expression, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (handler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handler", handler));
        }

        if (resolver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolver", resolver));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (leaf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaf", leaf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findConceptsValidateBeforeCall(String terminology, String query, String expression, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling findConcepts(Async)");
        }

        return findConceptsCall(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, _callback);

    }

    /**
     * Find concepts
     * Find concepts matching the specified search criteria
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param expression ECL Expression, e.g. &lt;&lt;80891009 (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @return ResultListConcept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConcept findConcepts(String terminology, String query, String expression, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf) throws ApiException {
        ApiResponse<ResultListConcept> localVarResp = findConceptsWithHttpInfo(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf);
        return localVarResp.getData();
    }

    /**
     * Find concepts
     * Find concepts matching the specified search criteria
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param expression ECL Expression, e.g. &lt;&lt;80891009 (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @return ApiResponse&lt;ResultListConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConcept> findConceptsWithHttpInfo(String terminology, String query, String expression, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf) throws ApiException {
        okhttp3.Call localVarCall = findConceptsValidateBeforeCall(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, null);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find concepts (asynchronously)
     * Find concepts matching the specified search criteria
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param expression ECL Expression, e.g. &lt;&lt;80891009 (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findConceptsAsync(String terminology, String query, String expression, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback<ResultListConcept> _callback) throws ApiException {

        okhttp3.Call localVarCall = findConceptsValidateBeforeCall(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, _callback);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findConcepts2
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findConcepts2Call(String query, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (handler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handler", handler));
        }

        if (resolver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolver", resolver));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (leaf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaf", leaf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findConcepts2ValidateBeforeCall(String query, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback _callback) throws ApiException {
        return findConcepts2Call(query, offset, limit, ascending, sort, handler, resolver, active, leaf, _callback);

    }

    /**
     * Find concepts (across all terminologies)
     * Find concepts matching the specified search criteria
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @return ResultListConcept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConcept findConcepts2(String query, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf) throws ApiException {
        ApiResponse<ResultListConcept> localVarResp = findConcepts2WithHttpInfo(query, offset, limit, ascending, sort, handler, resolver, active, leaf);
        return localVarResp.getData();
    }

    /**
     * Find concepts (across all terminologies)
     * Find concepts matching the specified search criteria
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @return ApiResponse&lt;ResultListConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConcept> findConcepts2WithHttpInfo(String query, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf) throws ApiException {
        okhttp3.Call localVarCall = findConcepts2ValidateBeforeCall(query, offset, limit, ascending, sort, handler, resolver, active, leaf, null);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find concepts (across all terminologies) (asynchronously)
     * Find concepts matching the specified search criteria
     * @param query query, e.g. \&quot;heart attack\&quot; (optional)
     * @param offset offset, e.g. 0 (optional)
     * @param limit limit, e.g. 10 (optional)
     * @param ascending ascending, e.g. true (optional)
     * @param sort sort field, e.g. code (optional)
     * @param handler search handler, e.g. STANDARD, EXACT, NGRAM (optional)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param active active only, e.g. true (optional)
     * @param leaf leaf nodes only, e.g. false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findConcepts2Async(String query, Integer offset, Integer limit, Boolean ascending, String sort, String handler, String resolver, Boolean active, Boolean leaf, final ApiCallback<ResultListConcept> _callback) throws ApiException {

        okhttp3.Call localVarCall = findConcepts2ValidateBeforeCall(query, offset, limit, ascending, sort, handler, resolver, active, leaf, _callback);
        Type localVarReturnType = new TypeToken<ResultListConcept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findMappings1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param query  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findMappings1Call(String terminology, String code, String query, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/mapset/{terminology}/{code}/mapping"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findMappings1ValidateBeforeCall(String terminology, String code, String query, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling findMappings1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling findMappings1(Async)");
        }

        return findMappings1Call(terminology, code, query, offset, limit, ascending, sort, _callback);

    }

    /**
     * Find mappings
     * Find mappings for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param query  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ResultListMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListMapping findMappings1(String terminology, String code, String query, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        ApiResponse<ResultListMapping> localVarResp = findMappings1WithHttpInfo(terminology, code, query, offset, limit, ascending, sort);
        return localVarResp.getData();
    }

    /**
     * Find mappings
     * Find mappings for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param query  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;ResultListMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListMapping> findMappings1WithHttpInfo(String terminology, String code, String query, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        okhttp3.Call localVarCall = findMappings1ValidateBeforeCall(terminology, code, query, offset, limit, ascending, sort, null);
        Type localVarReturnType = new TypeToken<ResultListMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find mappings (asynchronously)
     * Find mappings for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param query  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findMappings1Async(String terminology, String code, String query, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback<ResultListMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = findMappings1ValidateBeforeCall(terminology, code, query, offset, limit, ascending, sort, _callback);
        Type localVarReturnType = new TypeToken<ResultListMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSubsetMemberships1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSubsetMemberships1Call(String terminology, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/subsets"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSubsetMemberships1ValidateBeforeCall(String terminology, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling findSubsetMemberships1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling findSubsetMemberships1(Async)");
        }

        return findSubsetMemberships1Call(terminology, code, _callback);

    }

    /**
     * Get concept subset memberships
     * Get subsets that the specified terminology and code are a member of
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @return ResultListSubset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListSubset findSubsetMemberships1(String terminology, String code) throws ApiException {
        ApiResponse<ResultListSubset> localVarResp = findSubsetMemberships1WithHttpInfo(terminology, code);
        return localVarResp.getData();
    }

    /**
     * Get concept subset memberships
     * Get subsets that the specified terminology and code are a member of
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @return ApiResponse&lt;ResultListSubset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListSubset> findSubsetMemberships1WithHttpInfo(String terminology, String code) throws ApiException {
        okhttp3.Call localVarCall = findSubsetMemberships1ValidateBeforeCall(terminology, code, null);
        Type localVarReturnType = new TypeToken<ResultListSubset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get concept subset memberships (asynchronously)
     * Get subsets that the specified terminology and code are a member of
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSubsetMemberships1Async(String terminology, String code, final ApiCallback<ResultListSubset> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSubsetMemberships1ValidateBeforeCall(terminology, code, _callback);
        Type localVarReturnType = new TypeToken<ResultListSubset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTreePositionChildren1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTreePositionChildren1Call(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/trees/children"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTreePositionChildren1ValidateBeforeCall(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling findTreePositionChildren1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling findTreePositionChildren1(Async)");
        }

        return findTreePositionChildren1Call(terminology, code, offset, limit, ascending, sort, _callback);

    }

    /**
     * Find tree position children
     * Find the child tree position nodes for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ResultListConceptTreePosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConceptTreePosition findTreePositionChildren1(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        ApiResponse<ResultListConceptTreePosition> localVarResp = findTreePositionChildren1WithHttpInfo(terminology, code, offset, limit, ascending, sort);
        return localVarResp.getData();
    }

    /**
     * Find tree position children
     * Find the child tree position nodes for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;ResultListConceptTreePosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConceptTreePosition> findTreePositionChildren1WithHttpInfo(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        okhttp3.Call localVarCall = findTreePositionChildren1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, null);
        Type localVarReturnType = new TypeToken<ResultListConceptTreePosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find tree position children (asynchronously)
     * Find the child tree position nodes for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTreePositionChildren1Async(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback<ResultListConceptTreePosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTreePositionChildren1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, _callback);
        Type localVarReturnType = new TypeToken<ResultListConceptTreePosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTreePositions1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTreePositions1Call(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/trees"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTreePositions1ValidateBeforeCall(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling findTreePositions1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling findTreePositions1(Async)");
        }

        return findTreePositions1Call(terminology, code, offset, limit, ascending, sort, _callback);

    }

    /**
     * Find tree positions
     * Find tree positions for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ResultListConceptTreePosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConceptTreePosition findTreePositions1(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        ApiResponse<ResultListConceptTreePosition> localVarResp = findTreePositions1WithHttpInfo(terminology, code, offset, limit, ascending, sort);
        return localVarResp.getData();
    }

    /**
     * Find tree positions
     * Find tree positions for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;ResultListConceptTreePosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConceptTreePosition> findTreePositions1WithHttpInfo(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort) throws ApiException {
        okhttp3.Call localVarCall = findTreePositions1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, null);
        Type localVarReturnType = new TypeToken<ResultListConceptTreePosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find tree positions (asynchronously)
     * Find tree positions for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTreePositions1Async(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, final ApiCallback<ResultListConceptTreePosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTreePositions1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, _callback);
        Type localVarReturnType = new TypeToken<ResultListConceptTreePosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConcept1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConcept1Call(String terminology, String code, String resolver, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolver", resolver));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConcept1ValidateBeforeCall(String terminology, String code, String resolver, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getConcept1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConcept1(Async)");
        }

        return getConcept1Call(terminology, code, resolver, _callback);

    }

    /**
     * Get concept
     * Get concept object for the specified terminology, code, and resolver
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @return Concept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Concept getConcept1(String terminology, String code, String resolver) throws ApiException {
        ApiResponse<Concept> localVarResp = getConcept1WithHttpInfo(terminology, code, resolver);
        return localVarResp.getData();
    }

    /**
     * Get concept
     * Get concept object for the specified terminology, code, and resolver
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @return ApiResponse&lt;Concept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Concept> getConcept1WithHttpInfo(String terminology, String code, String resolver) throws ApiException {
        okhttp3.Call localVarCall = getConcept1ValidateBeforeCall(terminology, code, resolver, null);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get concept (asynchronously)
     * Get concept object for the specified terminology, code, and resolver
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param resolver graph resolver, e.g. DEFAULT, MIN (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConcept1Async(String terminology, String code, String resolver, final ApiCallback<Concept> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConcept1ValidateBeforeCall(terminology, code, resolver, _callback);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConceptMappings1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 283231003 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptMappings1Call(String terminology, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/mapping"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConceptMappings1ValidateBeforeCall(String terminology, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getConceptMappings1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConceptMappings1(Async)");
        }

        return getConceptMappings1Call(terminology, code, _callback);

    }

    /**
     * Get concept mappings
     * Get mappings that the specified terminology and code are mapped from
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 283231003 (required)
     * @return ResultListMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListMapping getConceptMappings1(String terminology, String code) throws ApiException {
        ApiResponse<ResultListMapping> localVarResp = getConceptMappings1WithHttpInfo(terminology, code);
        return localVarResp.getData();
    }

    /**
     * Get concept mappings
     * Get mappings that the specified terminology and code are mapped from
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 283231003 (required)
     * @return ApiResponse&lt;ResultListMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListMapping> getConceptMappings1WithHttpInfo(String terminology, String code) throws ApiException {
        okhttp3.Call localVarCall = getConceptMappings1ValidateBeforeCall(terminology, code, null);
        Type localVarReturnType = new TypeToken<ResultListMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get concept mappings (asynchronously)
     * Get mappings that the specified terminology and code are mapped from
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 283231003 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptMappings1Async(String terminology, String code, final ApiCallback<ResultListMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConceptMappings1ValidateBeforeCall(terminology, code, _callback);
        Type localVarReturnType = new TypeToken<ResultListMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProperties1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProperties1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigProperties1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConfigProperties1Call(_callback);

    }

    /**
     * Get properties
     * Get configuration information used to drive certain UI functionality
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void getConfigProperties1() throws ApiException {
        getConfigProperties1WithHttpInfo();
    }

    /**
     * Get properties
     * Get configuration information used to drive certain UI functionality
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getConfigProperties1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConfigProperties1ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get properties (asynchronously)
     * Get configuration information used to drive certain UI functionality
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProperties1Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigProperties1ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapset1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapset1Call(String terminology, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/mapset/{terminology}/{code}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMapset1ValidateBeforeCall(String terminology, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getMapset1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getMapset1(Async)");
        }

        return getMapset1Call(terminology, code, _callback);

    }

    /**
     * Get mapset
     * Get mapsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @return Mapset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Mapset getMapset1(String terminology, String code) throws ApiException {
        ApiResponse<Mapset> localVarResp = getMapset1WithHttpInfo(terminology, code);
        return localVarResp.getData();
    }

    /**
     * Get mapset
     * Get mapsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @return ApiResponse&lt;Mapset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapset> getMapset1WithHttpInfo(String terminology, String code) throws ApiException {
        okhttp3.Call localVarCall = getMapset1ValidateBeforeCall(terminology, code, null);
        Type localVarReturnType = new TypeToken<Mapset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapset (asynchronously)
     * Get mapsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 6011000124106 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapset1Async(String terminology, String code, final ApiCallback<Mapset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMapset1ValidateBeforeCall(terminology, code, _callback);
        Type localVarReturnType = new TypeToken<Mapset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapsets1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapsets1Call(String terminology, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/mapset/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMapsets1ValidateBeforeCall(String terminology, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getMapsets1(Async)");
        }

        return getMapsets1Call(terminology, _callback);

    }

    /**
     * Get mapsets
     * Get all mapsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ResultListMapset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListMapset getMapsets1(String terminology) throws ApiException {
        ApiResponse<ResultListMapset> localVarResp = getMapsets1WithHttpInfo(terminology);
        return localVarResp.getData();
    }

    /**
     * Get mapsets
     * Get all mapsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ApiResponse&lt;ResultListMapset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListMapset> getMapsets1WithHttpInfo(String terminology) throws ApiException {
        okhttp3.Call localVarCall = getMapsets1ValidateBeforeCall(terminology, null);
        Type localVarReturnType = new TypeToken<ResultListMapset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mapsets (asynchronously)
     * Get all mapsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapsets1Async(String terminology, final ApiCallback<ResultListMapset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMapsets1ValidateBeforeCall(terminology, _callback);
        Type localVarReturnType = new TypeToken<ResultListMapset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationships1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional, default to 100)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param inverse  (optional)
     * @param active  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationships1Call(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, Boolean inverse, Boolean active, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/relationships"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (inverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inverse", inverse));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationships1ValidateBeforeCall(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, Boolean inverse, Boolean active, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getRelationships1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRelationships1(Async)");
        }

        return getRelationships1Call(terminology, code, offset, limit, ascending, sort, inverse, active, filter, _callback);

    }

    /**
     * Get concept relationships
     * Get relationships for for specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional, default to 100)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param inverse  (optional)
     * @param active  (optional)
     * @param filter  (optional)
     * @return ResultListConceptRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListConceptRelationship getRelationships1(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, Boolean inverse, Boolean active, String filter) throws ApiException {
        ApiResponse<ResultListConceptRelationship> localVarResp = getRelationships1WithHttpInfo(terminology, code, offset, limit, ascending, sort, inverse, active, filter);
        return localVarResp.getData();
    }

    /**
     * Get concept relationships
     * Get relationships for for specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional, default to 100)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param inverse  (optional)
     * @param active  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;ResultListConceptRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListConceptRelationship> getRelationships1WithHttpInfo(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, Boolean inverse, Boolean active, String filter) throws ApiException {
        okhttp3.Call localVarCall = getRelationships1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, inverse, active, filter, null);
        Type localVarReturnType = new TypeToken<ResultListConceptRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get concept relationships (asynchronously)
     * Get relationships for for specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param offset  (optional)
     * @param limit  (optional, default to 100)
     * @param ascending  (optional)
     * @param sort  (optional)
     * @param inverse  (optional)
     * @param active  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationships1Async(String terminology, String code, Integer offset, Integer limit, Boolean ascending, String sort, Boolean inverse, Boolean active, String filter, final ApiCallback<ResultListConceptRelationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationships1ValidateBeforeCall(terminology, code, offset, limit, ascending, sort, inverse, active, filter, _callback);
        Type localVarReturnType = new TypeToken<ResultListConceptRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubset1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubset1Call(String terminology, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/subset/{terminology}/{code}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubset1ValidateBeforeCall(String terminology, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getSubset1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSubset1(Async)");
        }

        return getSubset1Call(terminology, code, _callback);

    }

    /**
     * Get subset
     * Get subsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @return Subset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Subset getSubset1(String terminology, String code) throws ApiException {
        ApiResponse<Subset> localVarResp = getSubset1WithHttpInfo(terminology, code);
        return localVarResp.getData();
    }

    /**
     * Get subset
     * Get subsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @return ApiResponse&lt;Subset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subset> getSubset1WithHttpInfo(String terminology, String code) throws ApiException {
        okhttp3.Call localVarCall = getSubset1ValidateBeforeCall(terminology, code, null);
        Type localVarReturnType = new TypeToken<Subset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subset (asynchronously)
     * Get subsets for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 723264001 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubset1Async(String terminology, String code, final ApiCallback<Subset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubset1ValidateBeforeCall(terminology, code, _callback);
        Type localVarReturnType = new TypeToken<Subset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubsets1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubsets1Call(String terminology, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/subset/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubsets1ValidateBeforeCall(String terminology, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getSubsets1(Async)");
        }

        return getSubsets1Call(terminology, _callback);

    }

    /**
     * Get subsets
     * Get all subsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ResultListSubset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ResultListSubset getSubsets1(String terminology) throws ApiException {
        ApiResponse<ResultListSubset> localVarResp = getSubsets1WithHttpInfo(terminology);
        return localVarResp.getData();
    }

    /**
     * Get subsets
     * Get all subsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ApiResponse&lt;ResultListSubset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListSubset> getSubsets1WithHttpInfo(String terminology) throws ApiException {
        okhttp3.Call localVarCall = getSubsets1ValidateBeforeCall(terminology, null);
        Type localVarReturnType = new TypeToken<ResultListSubset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subsets (asynchronously)
     * Get all subsets for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubsets1Async(String terminology, final ApiCallback<ResultListSubset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubsets1ValidateBeforeCall(terminology, _callback);
        Type localVarReturnType = new TypeToken<ResultListSubset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubtree1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param maxLevel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubtree1Call(String terminology, String code, Integer maxLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/concept/{terminology}/{code}/subtree"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLevel", maxLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubtree1ValidateBeforeCall(String terminology, String code, Integer maxLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getSubtree1(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSubtree1(Async)");
        }

        return getSubtree1Call(terminology, code, maxLevel, _callback);

    }

    /**
     * Get subtree
     * Get the subtree for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param maxLevel  (optional)
     * @return ConceptTreePosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ConceptTreePosition getSubtree1(String terminology, String code, Integer maxLevel) throws ApiException {
        ApiResponse<ConceptTreePosition> localVarResp = getSubtree1WithHttpInfo(terminology, code, maxLevel);
        return localVarResp.getData();
    }

    /**
     * Get subtree
     * Get the subtree for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param maxLevel  (optional)
     * @return ApiResponse&lt;ConceptTreePosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConceptTreePosition> getSubtree1WithHttpInfo(String terminology, String code, Integer maxLevel) throws ApiException {
        okhttp3.Call localVarCall = getSubtree1ValidateBeforeCall(terminology, code, maxLevel, null);
        Type localVarReturnType = new TypeToken<ConceptTreePosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subtree (asynchronously)
     * Get the subtree for the specified terminology and code
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param code concept code, e.g. 71388002 (required)
     * @param maxLevel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubtree1Async(String terminology, String code, Integer maxLevel, final ApiCallback<ConceptTreePosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubtree1ValidateBeforeCall(terminology, code, maxLevel, _callback);
        Type localVarReturnType = new TypeToken<ConceptTreePosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTerminologies1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminologies1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminologies1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTerminologies1Call(_callback);

    }

    /**
     * Get terminologies
     * Get all terminologies
     * @return List&lt;Terminology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Terminology> getTerminologies1() throws ApiException {
        ApiResponse<List<Terminology>> localVarResp = getTerminologies1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get terminologies
     * Get all terminologies
     * @return ApiResponse&lt;List&lt;Terminology&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Terminology>> getTerminologies1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTerminologies1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Terminology>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get terminologies (asynchronously)
     * Get all terminologies
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminologies1Async(final ApiCallback<List<Terminology>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminologies1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Terminology>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTerminology1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminology1Call(String terminology, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminology1ValidateBeforeCall(String terminology, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getTerminology1(Async)");
        }

        return getTerminology1Call(terminology, _callback);

    }

    /**
     * Get terminology
     * Get terminology object for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return Terminology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Terminology getTerminology1(String terminology) throws ApiException {
        ApiResponse<Terminology> localVarResp = getTerminology1WithHttpInfo(terminology);
        return localVarResp.getData();
    }

    /**
     * Get terminology
     * Get terminology object for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ApiResponse&lt;Terminology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Terminology> getTerminology1WithHttpInfo(String terminology) throws ApiException {
        okhttp3.Call localVarCall = getTerminology1ValidateBeforeCall(terminology, null);
        Type localVarReturnType = new TypeToken<Terminology>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get terminology (asynchronously)
     * Get terminology object for the specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminology1Async(String terminology, final ApiCallback<Terminology> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminology1ValidateBeforeCall(terminology, _callback);
        Type localVarReturnType = new TypeToken<Terminology>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTerminologyMetadata1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminologyMetadata1Call(String terminology, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/metadata/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminologyMetadata1ValidateBeforeCall(String terminology, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling getTerminologyMetadata1(Async)");
        }

        return getTerminologyMetadata1Call(terminology, _callback);

    }

    /**
     * Get terminology metadata
     * Get map of terminology abbreviations to metadata for specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void getTerminologyMetadata1(String terminology) throws ApiException {
        getTerminologyMetadata1WithHttpInfo(terminology);
    }

    /**
     * Get terminology metadata
     * Get map of terminology abbreviations to metadata for specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTerminologyMetadata1WithHttpInfo(String terminology) throws ApiException {
        okhttp3.Call localVarCall = getTerminologyMetadata1ValidateBeforeCall(terminology, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get terminology metadata (asynchronously)
     * Get map of terminology abbreviations to metadata for specified terminology
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTerminologyMetadata1Async(String terminology, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminologyMetadata1ValidateBeforeCall(terminology, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolveExpression1
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param expression  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveExpression1Call(String terminology, String expression, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminology/expr/{terminology}"
            .replace("{" + "terminology" + "}", localVarApiClient.escapeString(terminology.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveExpression1ValidateBeforeCall(String terminology, String expression, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'terminology' is set
        if (terminology == null) {
            throw new ApiException("Missing the required parameter 'terminology' when calling resolveExpression1(Async)");
        }

        return resolveExpression1Call(terminology, expression, _callback);

    }

    /**
     * Resolve expression
     * Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see &lt;a href&#x3D;\&quot;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\&quot;&gt;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md&lt;/a&gt;.
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param expression  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> resolveExpression1(String terminology, String expression) throws ApiException {
        ApiResponse<List<String>> localVarResp = resolveExpression1WithHttpInfo(terminology, expression);
        return localVarResp.getData();
    }

    /**
     * Resolve expression
     * Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see &lt;a href&#x3D;\&quot;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\&quot;&gt;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md&lt;/a&gt;.
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param expression  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> resolveExpression1WithHttpInfo(String terminology, String expression) throws ApiException {
        okhttp3.Call localVarCall = resolveExpression1ValidateBeforeCall(terminology, expression, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resolve expression (asynchronously)
     * Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see &lt;a href&#x3D;\&quot;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\&quot;&gt;https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md&lt;/a&gt;.
     * @param terminology terminology, e.g. SNOMEDCT_US (required)
     * @param expression  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveExpression1Async(String terminology, String expression, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveExpression1ValidateBeforeCall(terminology, expression, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
