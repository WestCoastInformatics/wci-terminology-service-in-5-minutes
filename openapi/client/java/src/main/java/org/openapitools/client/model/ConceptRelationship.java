/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a relationship between two concepts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-13T22:04:29.340934Z[Etc/UTC]")
public class ConceptRelationship {
  public static final String SERIALIZED_NAME_HIERARCHICAL = "hierarchical";
  @SerializedName(SERIALIZED_NAME_HIERARCHICAL)
  private Boolean hierarchical;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_ASSERTED_DIRECTION = "assertedDirection";
  @SerializedName(SERIALIZED_NAME_ASSERTED_DIRECTION)
  private Boolean assertedDirection;

  public static final String SERIALIZED_NAME_ADDITIONAL_TYPE = "additionalType";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TYPE)
  private String additionalType;

  public static final String SERIALIZED_NAME_DEFINING = "defining";
  @SerializedName(SERIALIZED_NAME_DEFINING)
  private Boolean defining;

  public static final String SERIALIZED_NAME_TO_TERMINOLOGY = "toTerminology";
  @SerializedName(SERIALIZED_NAME_TO_TERMINOLOGY)
  private String toTerminology;

  public static final String SERIALIZED_NAME_TO_CODE = "toCode";
  @SerializedName(SERIALIZED_NAME_TO_CODE)
  private String toCode;

  public static final String SERIALIZED_NAME_TO_VALUE = "toValue";
  @SerializedName(SERIALIZED_NAME_TO_VALUE)
  private String toValue;

  public static final String SERIALIZED_NAME_TO_NAME = "toName";
  @SerializedName(SERIALIZED_NAME_TO_NAME)
  private String toName;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_TERMINOLOGY_ID = "terminologyId";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_ID)
  private String terminologyId;

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  private String terminology;

  public ConceptRelationship() {
  }

  public ConceptRelationship hierarchical(Boolean hierarchical) {
    
    this.hierarchical = hierarchical;
    return this;
  }

   /**
   * indicates whether this relationship is part of the hierarchy
   * @return hierarchical
  **/
  @javax.annotation.Nonnull
  public Boolean getHierarchical() {
    return hierarchical;
  }


  public void setHierarchical(Boolean hierarchical) {
    this.hierarchical = hierarchical;
  }


  public ConceptRelationship type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * the high level type of relationship (more information about this label is provided in the terminology metadata)
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ConceptRelationship group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * used by terminologies that group relationships (e.g. SNOMEDCT) to indicate the group value
   * @return group
  **/
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public ConceptRelationship assertedDirection(Boolean assertedDirection) {
    
    this.assertedDirection = assertedDirection;
    return this;
  }

   /**
   * indicates whether this relationship is in the direction asserted by the terminology. This is meaninful because in some instances relationships are loaded in both directions
   * @return assertedDirection
  **/
  @javax.annotation.Nonnull
  public Boolean getAssertedDirection() {
    return assertedDirection;
  }


  public void setAssertedDirection(Boolean assertedDirection) {
    this.assertedDirection = assertedDirection;
  }


  public ConceptRelationship additionalType(String additionalType) {
    
    this.additionalType = additionalType;
    return this;
  }

   /**
   * the more specific type of relationship (more information about this label is provided in the terminology metadata)
   * @return additionalType
  **/
  @javax.annotation.Nullable
  public String getAdditionalType() {
    return additionalType;
  }


  public void setAdditionalType(String additionalType) {
    this.additionalType = additionalType;
  }


  public ConceptRelationship defining(Boolean defining) {
    
    this.defining = defining;
    return this;
  }

   /**
   * indicates whether this is a relationship is part of the concept logical definition
   * @return defining
  **/
  @javax.annotation.Nonnull
  public Boolean getDefining() {
    return defining;
  }


  public void setDefining(Boolean defining) {
    this.defining = defining;
  }


  public ConceptRelationship toTerminology(String toTerminology) {
    
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * the terminology of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toTerminology
  **/
  @javax.annotation.Nullable
  public String getToTerminology() {
    return toTerminology;
  }


  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public ConceptRelationship toCode(String toCode) {
    
    this.toCode = toCode;
    return this;
  }

   /**
   * the code of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toCode
  **/
  @javax.annotation.Nullable
  public String getToCode() {
    return toCode;
  }


  public void setToCode(String toCode) {
    this.toCode = toCode;
  }


  public ConceptRelationship toValue(String toValue) {
    
    this.toValue = toValue;
    return this;
  }

   /**
   * the literal value relationship is to (the right-hand side). If this is null, the relationship will have a &#39;to&#39;
   * @return toValue
  **/
  @javax.annotation.Nullable
  public String getToValue() {
    return toValue;
  }


  public void setToValue(String toValue) {
    this.toValue = toValue;
  }


  public ConceptRelationship toName(String toName) {
    
    this.toName = toName;
    return this;
  }

   /**
   * the name of the concept this relationship is to (the right-hand side). If this is not used, the relationship will have a &#39;toValue&#39;
   * @return toName
  **/
  @javax.annotation.Nullable
  public String getToName() {
    return toName;
  }


  public void setToName(String toName) {
    this.toName = toName;
  }


  public ConceptRelationship created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ConceptRelationship local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @javax.annotation.Nonnull
  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public ConceptRelationship modifiedBy(String modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @javax.annotation.Nonnull
  public String getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ConceptRelationship modified(OffsetDateTime modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ConceptRelationship id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ConceptRelationship active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConceptRelationship terminologyId(String terminologyId) {
    
    this.terminologyId = terminologyId;
    return this;
  }

   /**
   * the identifier asserted by the terminology
   * @return terminologyId
  **/
  @javax.annotation.Nullable
  public String getTerminologyId() {
    return terminologyId;
  }


  public void setTerminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
  }


  public ConceptRelationship terminology(String terminology) {
    
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @javax.annotation.Nonnull
  public String getTerminology() {
    return terminology;
  }


  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptRelationship conceptRelationship = (ConceptRelationship) o;
    return Objects.equals(this.hierarchical, conceptRelationship.hierarchical) &&
        Objects.equals(this.type, conceptRelationship.type) &&
        Objects.equals(this.group, conceptRelationship.group) &&
        Objects.equals(this.assertedDirection, conceptRelationship.assertedDirection) &&
        Objects.equals(this.additionalType, conceptRelationship.additionalType) &&
        Objects.equals(this.defining, conceptRelationship.defining) &&
        Objects.equals(this.toTerminology, conceptRelationship.toTerminology) &&
        Objects.equals(this.toCode, conceptRelationship.toCode) &&
        Objects.equals(this.toValue, conceptRelationship.toValue) &&
        Objects.equals(this.toName, conceptRelationship.toName) &&
        Objects.equals(this.created, conceptRelationship.created) &&
        Objects.equals(this.local, conceptRelationship.local) &&
        Objects.equals(this.modifiedBy, conceptRelationship.modifiedBy) &&
        Objects.equals(this.modified, conceptRelationship.modified) &&
        Objects.equals(this.id, conceptRelationship.id) &&
        Objects.equals(this.active, conceptRelationship.active) &&
        Objects.equals(this.terminologyId, conceptRelationship.terminologyId) &&
        Objects.equals(this.terminology, conceptRelationship.terminology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hierarchical, type, group, assertedDirection, additionalType, defining, toTerminology, toCode, toValue, toName, created, local, modifiedBy, modified, id, active, terminologyId, terminology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptRelationship {\n");
    sb.append("    hierarchical: ").append(toIndentedString(hierarchical)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    assertedDirection: ").append(toIndentedString(assertedDirection)).append("\n");
    sb.append("    additionalType: ").append(toIndentedString(additionalType)).append("\n");
    sb.append("    defining: ").append(toIndentedString(defining)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    toCode: ").append(toIndentedString(toCode)).append("\n");
    sb.append("    toValue: ").append(toIndentedString(toValue)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    terminologyId: ").append(toIndentedString(terminologyId)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hierarchical");
    openapiFields.add("type");
    openapiFields.add("group");
    openapiFields.add("assertedDirection");
    openapiFields.add("additionalType");
    openapiFields.add("defining");
    openapiFields.add("toTerminology");
    openapiFields.add("toCode");
    openapiFields.add("toValue");
    openapiFields.add("toName");
    openapiFields.add("created");
    openapiFields.add("local");
    openapiFields.add("modifiedBy");
    openapiFields.add("modified");
    openapiFields.add("id");
    openapiFields.add("active");
    openapiFields.add("terminologyId");
    openapiFields.add("terminology");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hierarchical");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("assertedDirection");
    openapiRequiredFields.add("defining");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("local");
    openapiRequiredFields.add("modifiedBy");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("terminology");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConceptRelationship
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptRelationship.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptRelationship is not found in the empty JSON string", ConceptRelationship.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptRelationship.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptRelationship` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConceptRelationship.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("additionalType") != null && !jsonObj.get("additionalType").isJsonNull()) && !jsonObj.get("additionalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalType").toString()));
      }
      if ((jsonObj.get("toTerminology") != null && !jsonObj.get("toTerminology").isJsonNull()) && !jsonObj.get("toTerminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toTerminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toTerminology").toString()));
      }
      if ((jsonObj.get("toCode") != null && !jsonObj.get("toCode").isJsonNull()) && !jsonObj.get("toCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toCode").toString()));
      }
      if ((jsonObj.get("toValue") != null && !jsonObj.get("toValue").isJsonNull()) && !jsonObj.get("toValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toValue").toString()));
      }
      if ((jsonObj.get("toName") != null && !jsonObj.get("toName").isJsonNull()) && !jsonObj.get("toName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toName").toString()));
      }
      if (!jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("terminologyId") != null && !jsonObj.get("terminologyId").isJsonNull()) && !jsonObj.get("terminologyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminologyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminologyId").toString()));
      }
      if (!jsonObj.get("terminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminology").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptRelationship.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptRelationship' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptRelationship> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptRelationship.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptRelationship>() {
           @Override
           public void write(JsonWriter out, ConceptRelationship value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptRelationship read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConceptRelationship given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConceptRelationship
  * @throws IOException if the JSON string is invalid with respect to ConceptRelationship
  */
  public static ConceptRelationship fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptRelationship.class);
  }

 /**
  * Convert an instance of ConceptRelationship to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

