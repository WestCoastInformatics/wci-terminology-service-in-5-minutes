/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a name with a term type that contributes meaning to a concept
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-13T22:04:29.340934Z[Etc/UTC]")
public class Atom {
  public static final String SERIALIZED_NAME_CODE_ID = "codeId";
  @SerializedName(SERIALIZED_NAME_CODE_ID)
  private String codeId;

  public static final String SERIALIZED_NAME_LOCALE_MAP = "localeMap";
  @SerializedName(SERIALIZED_NAME_LOCALE_MAP)
  private Map<String, Boolean> localeMap = new HashMap<>();

  public static final String SERIALIZED_NAME_CONCEPT_ID = "conceptId";
  @SerializedName(SERIALIZED_NAME_CONCEPT_ID)
  private String conceptId;

  public static final String SERIALIZED_NAME_DESCRIPTOR_ID = "descriptorId";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR_ID)
  private String descriptorId;

  public static final String SERIALIZED_NAME_TERM_TYPE = "termType";
  @SerializedName(SERIALIZED_NAME_TERM_TYPE)
  private String termType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TERMINOLOGY_ID = "terminologyId";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY_ID)
  private String terminologyId;

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  private String terminology;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public Atom() {
  }

  public Atom codeId(String codeId) {
    
    this.codeId = codeId;
    return this;
  }

   /**
   * the code in the specified terminology
   * @return codeId
  **/
  @javax.annotation.Nonnull
  public String getCodeId() {
    return codeId;
  }


  public void setCodeId(String codeId) {
    this.codeId = codeId;
  }


  public Atom localeMap(Map<String, Boolean> localeMap) {
    
    this.localeMap = localeMap;
    return this;
  }

  public Atom putLocaleMapItem(String key, Boolean localeMapItem) {
    if (this.localeMap == null) {
      this.localeMap = new HashMap<>();
    }
    this.localeMap.put(key, localeMapItem);
    return this;
  }

   /**
   * a map of language codes to boolean values indicated whether this definition is preferred in that language context
   * @return localeMap
  **/
  @javax.annotation.Nonnull
  public Map<String, Boolean> getLocaleMap() {
    return localeMap;
  }


  public void setLocaleMap(Map<String, Boolean> localeMap) {
    this.localeMap = localeMap;
  }


  public Atom conceptId(String conceptId) {
    
    this.conceptId = conceptId;
    return this;
  }

   /**
   * the concept id (for terminologies that use concepts)
   * @return conceptId
  **/
  @javax.annotation.Nullable
  public String getConceptId() {
    return conceptId;
  }


  public void setConceptId(String conceptId) {
    this.conceptId = conceptId;
  }


  public Atom descriptorId(String descriptorId) {
    
    this.descriptorId = descriptorId;
    return this;
  }

   /**
   * the descriptor id (for terminologies that use descriptors)
   * @return descriptorId
  **/
  @javax.annotation.Nullable
  public String getDescriptorId() {
    return descriptorId;
  }


  public void setDescriptorId(String descriptorId) {
    this.descriptorId = descriptorId;
  }


  public Atom termType(String termType) {
    
    this.termType = termType;
    return this;
  }

   /**
   * the term type
   * @return termType
  **/
  @javax.annotation.Nonnull
  public String getTermType() {
    return termType;
  }


  public void setTermType(String termType) {
    this.termType = termType;
  }


  public Atom created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Atom local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @javax.annotation.Nonnull
  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Atom modifiedBy(String modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @javax.annotation.Nonnull
  public String getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Atom modified(OffsetDateTime modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public Atom id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Atom active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Atom name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Atom terminologyId(String terminologyId) {
    
    this.terminologyId = terminologyId;
    return this;
  }

   /**
   * the identifier asserted by the terminology
   * @return terminologyId
  **/
  @javax.annotation.Nullable
  public String getTerminologyId() {
    return terminologyId;
  }


  public void setTerminologyId(String terminologyId) {
    this.terminologyId = terminologyId;
  }


  public Atom terminology(String terminology) {
    
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @javax.annotation.Nonnull
  public String getTerminology() {
    return terminology;
  }


  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public Atom attributes(Map<String, String> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public Atom putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Atom atom = (Atom) o;
    return Objects.equals(this.codeId, atom.codeId) &&
        Objects.equals(this.localeMap, atom.localeMap) &&
        Objects.equals(this.conceptId, atom.conceptId) &&
        Objects.equals(this.descriptorId, atom.descriptorId) &&
        Objects.equals(this.termType, atom.termType) &&
        Objects.equals(this.created, atom.created) &&
        Objects.equals(this.local, atom.local) &&
        Objects.equals(this.modifiedBy, atom.modifiedBy) &&
        Objects.equals(this.modified, atom.modified) &&
        Objects.equals(this.id, atom.id) &&
        Objects.equals(this.active, atom.active) &&
        Objects.equals(this.name, atom.name) &&
        Objects.equals(this.terminologyId, atom.terminologyId) &&
        Objects.equals(this.terminology, atom.terminology) &&
        Objects.equals(this.attributes, atom.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeId, localeMap, conceptId, descriptorId, termType, created, local, modifiedBy, modified, id, active, name, terminologyId, terminology, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Atom {\n");
    sb.append("    codeId: ").append(toIndentedString(codeId)).append("\n");
    sb.append("    localeMap: ").append(toIndentedString(localeMap)).append("\n");
    sb.append("    conceptId: ").append(toIndentedString(conceptId)).append("\n");
    sb.append("    descriptorId: ").append(toIndentedString(descriptorId)).append("\n");
    sb.append("    termType: ").append(toIndentedString(termType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminologyId: ").append(toIndentedString(terminologyId)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codeId");
    openapiFields.add("localeMap");
    openapiFields.add("conceptId");
    openapiFields.add("descriptorId");
    openapiFields.add("termType");
    openapiFields.add("created");
    openapiFields.add("local");
    openapiFields.add("modifiedBy");
    openapiFields.add("modified");
    openapiFields.add("id");
    openapiFields.add("active");
    openapiFields.add("name");
    openapiFields.add("terminologyId");
    openapiFields.add("terminology");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codeId");
    openapiRequiredFields.add("localeMap");
    openapiRequiredFields.add("termType");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("local");
    openapiRequiredFields.add("modifiedBy");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("terminology");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Atom
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Atom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Atom is not found in the empty JSON string", Atom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Atom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Atom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Atom.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("codeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeId").toString()));
      }
      if ((jsonObj.get("conceptId") != null && !jsonObj.get("conceptId").isJsonNull()) && !jsonObj.get("conceptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conceptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conceptId").toString()));
      }
      if ((jsonObj.get("descriptorId") != null && !jsonObj.get("descriptorId").isJsonNull()) && !jsonObj.get("descriptorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptorId").toString()));
      }
      if (!jsonObj.get("termType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termType").toString()));
      }
      if (!jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("terminologyId") != null && !jsonObj.get("terminologyId").isJsonNull()) && !jsonObj.get("terminologyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminologyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminologyId").toString()));
      }
      if (!jsonObj.get("terminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminology").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Atom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Atom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Atom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Atom.class));

       return (TypeAdapter<T>) new TypeAdapter<Atom>() {
           @Override
           public void write(JsonWriter out, Atom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Atom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Atom given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Atom
  * @throws IOException if the JSON string is invalid with respect to Atom
  */
  public static Atom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Atom.class);
  }

 /**
  * Convert an instance of Atom to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

