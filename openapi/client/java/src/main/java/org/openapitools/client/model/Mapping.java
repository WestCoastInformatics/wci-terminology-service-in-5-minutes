/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a mapping from a concept in one terminology to a concept in another
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-13T22:04:29.340934Z[Etc/UTC]")
public class Mapping {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_FROM_TERMINOLOGY = "fromTerminology";
  @SerializedName(SERIALIZED_NAME_FROM_TERMINOLOGY)
  private String fromTerminology;

  public static final String SERIALIZED_NAME_FROM_CODE = "fromCode";
  @SerializedName(SERIALIZED_NAME_FROM_CODE)
  private String fromCode;

  public static final String SERIALIZED_NAME_TO_TERMINOLOGY = "toTerminology";
  @SerializedName(SERIALIZED_NAME_TO_TERMINOLOGY)
  private String toTerminology;

  public static final String SERIALIZED_NAME_TO_CODE = "toCode";
  @SerializedName(SERIALIZED_NAME_TO_CODE)
  private String toCode;

  public static final String SERIALIZED_NAME_FROM_NAME = "fromName";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_TO_NAME = "toName";
  @SerializedName(SERIALIZED_NAME_TO_NAME)
  private String toName;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_MAPSET_CODE = "mapsetCode";
  @SerializedName(SERIALIZED_NAME_MAPSET_CODE)
  private String mapsetCode;

  public static final String SERIALIZED_NAME_ADVICE = "advice";
  @SerializedName(SERIALIZED_NAME_ADVICE)
  private String advice;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public Mapping() {
  }

  public Mapping group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * the value for the group this map participates in (for complex maps that use groups)
   * @return group
  **/
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public Mapping category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * the map category (for RF2-based maps)
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public Mapping fromTerminology(String fromTerminology) {
    
    this.fromTerminology = fromTerminology;
    return this;
  }

   /**
   * the terminology of the &#39;from&#39; code
   * @return fromTerminology
  **/
  @javax.annotation.Nonnull
  public String getFromTerminology() {
    return fromTerminology;
  }


  public void setFromTerminology(String fromTerminology) {
    this.fromTerminology = fromTerminology;
  }


  public Mapping fromCode(String fromCode) {
    
    this.fromCode = fromCode;
    return this;
  }

   /**
   * the &#39;from&#39; code (the left-hand side)
   * @return fromCode
  **/
  @javax.annotation.Nonnull
  public String getFromCode() {
    return fromCode;
  }


  public void setFromCode(String fromCode) {
    this.fromCode = fromCode;
  }


  public Mapping toTerminology(String toTerminology) {
    
    this.toTerminology = toTerminology;
    return this;
  }

   /**
   * the terminology of the &#39;to&#39; code
   * @return toTerminology
  **/
  @javax.annotation.Nonnull
  public String getToTerminology() {
    return toTerminology;
  }


  public void setToTerminology(String toTerminology) {
    this.toTerminology = toTerminology;
  }


  public Mapping toCode(String toCode) {
    
    this.toCode = toCode;
    return this;
  }

   /**
   * the &#39;to&#39; code (the left-hand side)
   * @return toCode
  **/
  @javax.annotation.Nonnull
  public String getToCode() {
    return toCode;
  }


  public void setToCode(String toCode) {
    this.toCode = toCode;
  }


  public Mapping fromName(String fromName) {
    
    this.fromName = fromName;
    return this;
  }

   /**
   * the name of the &#39;from&#39; code
   * @return fromName
  **/
  @javax.annotation.Nonnull
  public String getFromName() {
    return fromName;
  }


  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public Mapping toName(String toName) {
    
    this.toName = toName;
    return this;
  }

   /**
   * the name of the &#39;to&#39; code
   * @return toName
  **/
  @javax.annotation.Nonnull
  public String getToName() {
    return toName;
  }


  public void setToName(String toName) {
    this.toName = toName;
  }


  public Mapping rule(String rule) {
    
    this.rule = rule;
    return this;
  }

   /**
   * the machine-readable map rule for this mapping (for complex maps that use rules)
   * @return rule
  **/
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }


  public void setRule(String rule) {
    this.rule = rule;
  }


  public Mapping mapsetCode(String mapsetCode) {
    
    this.mapsetCode = mapsetCode;
    return this;
  }

   /**
   * the code of the mapset containing this mapping
   * @return mapsetCode
  **/
  @javax.annotation.Nonnull
  public String getMapsetCode() {
    return mapsetCode;
  }


  public void setMapsetCode(String mapsetCode) {
    this.mapsetCode = mapsetCode;
  }


  public Mapping advice(String advice) {
    
    this.advice = advice;
    return this;
  }

   /**
   * the map advice
   * @return advice
  **/
  @javax.annotation.Nullable
  public String getAdvice() {
    return advice;
  }


  public void setAdvice(String advice) {
    this.advice = advice;
  }


  public Mapping priority(String priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * the value for the priority of this map within its group (for complex maps that use groups)
   * @return priority
  **/
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }


  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Mapping created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Mapping local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @javax.annotation.Nonnull
  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Mapping modifiedBy(String modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @javax.annotation.Nonnull
  public String getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Mapping modified(OffsetDateTime modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public Mapping id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Mapping active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Mapping attributes(Map<String, String> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public Mapping putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * key/value pairs associated with this object. Entries in this map are terminology-specific
   * @return attributes
  **/
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mapping mapping = (Mapping) o;
    return Objects.equals(this.group, mapping.group) &&
        Objects.equals(this.category, mapping.category) &&
        Objects.equals(this.fromTerminology, mapping.fromTerminology) &&
        Objects.equals(this.fromCode, mapping.fromCode) &&
        Objects.equals(this.toTerminology, mapping.toTerminology) &&
        Objects.equals(this.toCode, mapping.toCode) &&
        Objects.equals(this.fromName, mapping.fromName) &&
        Objects.equals(this.toName, mapping.toName) &&
        Objects.equals(this.rule, mapping.rule) &&
        Objects.equals(this.mapsetCode, mapping.mapsetCode) &&
        Objects.equals(this.advice, mapping.advice) &&
        Objects.equals(this.priority, mapping.priority) &&
        Objects.equals(this.created, mapping.created) &&
        Objects.equals(this.local, mapping.local) &&
        Objects.equals(this.modifiedBy, mapping.modifiedBy) &&
        Objects.equals(this.modified, mapping.modified) &&
        Objects.equals(this.id, mapping.id) &&
        Objects.equals(this.active, mapping.active) &&
        Objects.equals(this.attributes, mapping.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, category, fromTerminology, fromCode, toTerminology, toCode, fromName, toName, rule, mapsetCode, advice, priority, created, local, modifiedBy, modified, id, active, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mapping {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    fromTerminology: ").append(toIndentedString(fromTerminology)).append("\n");
    sb.append("    fromCode: ").append(toIndentedString(fromCode)).append("\n");
    sb.append("    toTerminology: ").append(toIndentedString(toTerminology)).append("\n");
    sb.append("    toCode: ").append(toIndentedString(toCode)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    mapsetCode: ").append(toIndentedString(mapsetCode)).append("\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group");
    openapiFields.add("category");
    openapiFields.add("fromTerminology");
    openapiFields.add("fromCode");
    openapiFields.add("toTerminology");
    openapiFields.add("toCode");
    openapiFields.add("fromName");
    openapiFields.add("toName");
    openapiFields.add("rule");
    openapiFields.add("mapsetCode");
    openapiFields.add("advice");
    openapiFields.add("priority");
    openapiFields.add("created");
    openapiFields.add("local");
    openapiFields.add("modifiedBy");
    openapiFields.add("modified");
    openapiFields.add("id");
    openapiFields.add("active");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fromTerminology");
    openapiRequiredFields.add("fromCode");
    openapiRequiredFields.add("toTerminology");
    openapiRequiredFields.add("toCode");
    openapiRequiredFields.add("fromName");
    openapiRequiredFields.add("toName");
    openapiRequiredFields.add("mapsetCode");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("local");
    openapiRequiredFields.add("modifiedBy");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("active");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Mapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mapping is not found in the empty JSON string", Mapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Mapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("fromTerminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromTerminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromTerminology").toString()));
      }
      if (!jsonObj.get("fromCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromCode").toString()));
      }
      if (!jsonObj.get("toTerminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toTerminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toTerminology").toString()));
      }
      if (!jsonObj.get("toCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toCode").toString()));
      }
      if (!jsonObj.get("fromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromName").toString()));
      }
      if (!jsonObj.get("toName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toName").toString()));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if (!jsonObj.get("mapsetCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapsetCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapsetCode").toString()));
      }
      if ((jsonObj.get("advice") != null && !jsonObj.get("advice").isJsonNull()) && !jsonObj.get("advice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advice").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if (!jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mapping.class));

       return (TypeAdapter<T>) new TypeAdapter<Mapping>() {
           @Override
           public void write(JsonWriter out, Mapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Mapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Mapping
  * @throws IOException if the JSON string is invalid with respect to Mapping
  */
  public static Mapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mapping.class);
  }

 /**
  * Convert an instance of Mapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

