/*
 * West Coast Informatics Terminology API
 * API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@westcoastinformatics.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a concept position in a hierarchical tree with a path to the root
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-13T22:04:29.340934Z[Etc/UTC]")
public class ConceptTreePosition {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<ConceptTreePosition> children;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_ANCESTOR_PATH = "ancestorPath";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_PATH)
  private String ancestorPath;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_ADDITIONAL_TYPE = "additionalType";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TYPE)
  private String additionalType;

  public static final String SERIALIZED_NAME_CHILD_CT = "childCt";
  @SerializedName(SERIALIZED_NAME_CHILD_CT)
  private Integer childCt;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  private String terminology;

  public ConceptTreePosition() {
  }

  public ConceptTreePosition children(List<ConceptTreePosition> children) {
    
    this.children = children;
    return this;
  }

  public ConceptTreePosition addChildrenItem(ConceptTreePosition childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * the child tree positions of this node
   * @return children
  **/
  @javax.annotation.Nullable
  public List<ConceptTreePosition> getChildren() {
    return children;
  }


  public void setChildren(List<ConceptTreePosition> children) {
    this.children = children;
  }


  public ConceptTreePosition level(Integer level) {
    
    this.level = level;
    return this;
  }

   /**
   * the level of depth in the hierarchy of this node
   * @return level
  **/
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }


  public void setLevel(Integer level) {
    this.level = level;
  }


  public ConceptTreePosition ancestorPath(String ancestorPath) {
    
    this.ancestorPath = ancestorPath;
    return this;
  }

   /**
   * the path from the root code expressed as a sequence of dot (.) separated code values starting with the root and ending with the parent code
   * @return ancestorPath
  **/
  @javax.annotation.Nullable
  public String getAncestorPath() {
    return ancestorPath;
  }


  public void setAncestorPath(String ancestorPath) {
    this.ancestorPath = ancestorPath;
  }


  public ConceptTreePosition code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * the code in the specified terminology
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ConceptTreePosition additionalType(String additionalType) {
    
    this.additionalType = additionalType;
    return this;
  }

   /**
   * the more specific type of relationship (more information about this label is provided in the terminology metadata)
   * @return additionalType
  **/
  @javax.annotation.Nullable
  public String getAdditionalType() {
    return additionalType;
  }


  public void setAdditionalType(String additionalType) {
    this.additionalType = additionalType;
  }


  public ConceptTreePosition childCt(Integer childCt) {
    
    this.childCt = childCt;
    return this;
  }

   /**
   * the child count of this node
   * @return childCt
  **/
  @javax.annotation.Nullable
  public Integer getChildCt() {
    return childCt;
  }


  public void setChildCt(Integer childCt) {
    this.childCt = childCt;
  }


  public ConceptTreePosition created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * the created date
   * @return created
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ConceptTreePosition local(Boolean local) {
    
    this.local = local;
    return this;
  }

   /**
   * indicates whether this data element was created by local editing
   * @return local
  **/
  @javax.annotation.Nonnull
  public Boolean getLocal() {
    return local;
  }


  public void setLocal(Boolean local) {
    this.local = local;
  }


  public ConceptTreePosition modifiedBy(String modifiedBy) {
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * the identifier of the user who made the last modification
   * @return modifiedBy
  **/
  @javax.annotation.Nonnull
  public String getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ConceptTreePosition modified(OffsetDateTime modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * the last modified date
   * @return modified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ConceptTreePosition id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * the unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ConceptTreePosition active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * indicates whether or not this data element is active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConceptTreePosition name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * the name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConceptTreePosition terminology(String terminology) {
    
    this.terminology = terminology;
    return this;
  }

   /**
   * the terminology abbreviation
   * @return terminology
  **/
  @javax.annotation.Nonnull
  public String getTerminology() {
    return terminology;
  }


  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptTreePosition conceptTreePosition = (ConceptTreePosition) o;
    return Objects.equals(this.children, conceptTreePosition.children) &&
        Objects.equals(this.level, conceptTreePosition.level) &&
        Objects.equals(this.ancestorPath, conceptTreePosition.ancestorPath) &&
        Objects.equals(this.code, conceptTreePosition.code) &&
        Objects.equals(this.additionalType, conceptTreePosition.additionalType) &&
        Objects.equals(this.childCt, conceptTreePosition.childCt) &&
        Objects.equals(this.created, conceptTreePosition.created) &&
        Objects.equals(this.local, conceptTreePosition.local) &&
        Objects.equals(this.modifiedBy, conceptTreePosition.modifiedBy) &&
        Objects.equals(this.modified, conceptTreePosition.modified) &&
        Objects.equals(this.id, conceptTreePosition.id) &&
        Objects.equals(this.active, conceptTreePosition.active) &&
        Objects.equals(this.name, conceptTreePosition.name) &&
        Objects.equals(this.terminology, conceptTreePosition.terminology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, level, ancestorPath, code, additionalType, childCt, created, local, modifiedBy, modified, id, active, name, terminology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptTreePosition {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    ancestorPath: ").append(toIndentedString(ancestorPath)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    additionalType: ").append(toIndentedString(additionalType)).append("\n");
    sb.append("    childCt: ").append(toIndentedString(childCt)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("level");
    openapiFields.add("ancestorPath");
    openapiFields.add("code");
    openapiFields.add("additionalType");
    openapiFields.add("childCt");
    openapiFields.add("created");
    openapiFields.add("local");
    openapiFields.add("modifiedBy");
    openapiFields.add("modified");
    openapiFields.add("id");
    openapiFields.add("active");
    openapiFields.add("name");
    openapiFields.add("terminology");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("local");
    openapiRequiredFields.add("modifiedBy");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("terminology");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConceptTreePosition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConceptTreePosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConceptTreePosition is not found in the empty JSON string", ConceptTreePosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConceptTreePosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConceptTreePosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConceptTreePosition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            ConceptTreePosition.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if ((jsonObj.get("ancestorPath") != null && !jsonObj.get("ancestorPath").isJsonNull()) && !jsonObj.get("ancestorPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestorPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancestorPath").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("additionalType") != null && !jsonObj.get("additionalType").isJsonNull()) && !jsonObj.get("additionalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalType").toString()));
      }
      if (!jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("terminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminology").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConceptTreePosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConceptTreePosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConceptTreePosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConceptTreePosition.class));

       return (TypeAdapter<T>) new TypeAdapter<ConceptTreePosition>() {
           @Override
           public void write(JsonWriter out, ConceptTreePosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConceptTreePosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConceptTreePosition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConceptTreePosition
  * @throws IOException if the JSON string is invalid with respect to ConceptTreePosition
  */
  public static ConceptTreePosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConceptTreePosition.class);
  }

 /**
  * Convert an instance of ConceptTreePosition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

