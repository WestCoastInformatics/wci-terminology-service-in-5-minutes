# coding: utf-8

"""
    West Coast Informatics Terminology API

    API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@westcoastinformatics.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.terminology_metadata import TerminologyMetadata  # noqa: E501

class TestTerminologyMetadata(unittest.TestCase):
    """TerminologyMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TerminologyMetadata:
        """Test TerminologyMetadata
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TerminologyMetadata`
        """
        model = TerminologyMetadata()  # noqa: E501
        if include_optional:
            return TerminologyMetadata(
                attribute_names = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                terminology = openapi_client.models.terminology.Terminology(
                    version = 'e.g. 20230301', 
                    abbreviation = 'e.g. SNOMEDCT, RXNORM, LNC, ICD10CM', 
                    system_oid = 'e.g. 2.16.840.1.113883.6.96', 
                    system_uri = 'e.g. http://snomed.info/sct', 
                    expression_enabled = True, 
                    name = '', 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    local = True, 
                    modified_by = '', 
                    modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    active = True, 
                    attributes = {
                        'key' : ''
                        }, ),
                semantic_types = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                additional_relationship_types = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                relationship_types = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                term_types = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                languages = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                other = {
                    'key' : openapi_client.models.metadata.Metadata(
                        type = 'e.g. STY, REL', 
                        abbreviation = 'e.g. isa, PT, en_US', 
                        rank = 56, 
                        name = '', 
                        terminology = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        local = True, 
                        modified_by = '', 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        active = True, )
                    },
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                local = True,
                modified_by = '',
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                active = True
            )
        else:
            return TerminologyMetadata(
                terminology = openapi_client.models.terminology.Terminology(
                    version = 'e.g. 20230301', 
                    abbreviation = 'e.g. SNOMEDCT, RXNORM, LNC, ICD10CM', 
                    system_oid = 'e.g. 2.16.840.1.113883.6.96', 
                    system_uri = 'e.g. http://snomed.info/sct', 
                    expression_enabled = True, 
                    name = '', 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    local = True, 
                    modified_by = '', 
                    modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    active = True, 
                    attributes = {
                        'key' : ''
                        }, ),
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                local = True,
                modified_by = '',
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                active = True,
        )
        """

    def testTerminologyMetadata(self):
        """Test TerminologyMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
