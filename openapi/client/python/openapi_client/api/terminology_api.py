# coding: utf-8

"""
    West Coast Informatics Terminology API

    API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@westcoastinformatics.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Dict, List, Optional

from openapi_client.models.atom import Atom
from openapi_client.models.concept import Concept
from openapi_client.models.concept_tree_position import ConceptTreePosition
from openapi_client.models.mapset import Mapset
from openapi_client.models.result_list_concept import ResultListConcept
from openapi_client.models.result_list_concept_relationship import ResultListConceptRelationship
from openapi_client.models.result_list_concept_tree_position import ResultListConceptTreePosition
from openapi_client.models.result_list_mapping import ResultListMapping
from openapi_client.models.result_list_mapset import ResultListMapset
from openapi_client.models.result_list_subset import ResultListSubset
from openapi_client.models.subset import Subset
from openapi_client.models.terminology import Terminology

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TerminologyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_synonym(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="code, e.g. 80891009")], name : Annotated[Optional[StrictStr], Field(description="synonym name, e.g. \"test name\"")] = None, term_type : Annotated[Optional[StrictStr], Field(description="term type, e.g. INDEX_SY")] = None, request_body : Optional[Dict[str, StrictStr]] = None, **kwargs) -> Atom:  # noqa: E501
        """Add synonym  # noqa: E501

        Add synonym with specified parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_synonym(terminology, code, name, term_type, request_body, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: code, e.g. 80891009 (required)
        :type code: str
        :param name: synonym name, e.g. \"test name\"
        :type name: str
        :param term_type: term type, e.g. INDEX_SY
        :type term_type: str
        :param request_body:
        :type request_body: Dict[str, str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Atom
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_synonym_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_synonym_with_http_info(terminology, code, name, term_type, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def add_synonym_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="code, e.g. 80891009")], name : Annotated[Optional[StrictStr], Field(description="synonym name, e.g. \"test name\"")] = None, term_type : Annotated[Optional[StrictStr], Field(description="term type, e.g. INDEX_SY")] = None, request_body : Optional[Dict[str, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add synonym  # noqa: E501

        Add synonym with specified parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_synonym_with_http_info(terminology, code, name, term_type, request_body, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: code, e.g. 80891009 (required)
        :type code: str
        :param name: synonym name, e.g. \"test name\"
        :type name: str
        :param term_type: term type, e.g. INDEX_SY
        :type term_type: str
        :param request_body:
        :type request_body: Dict[str, str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Atom, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'name',
            'term_type',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_synonym" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('term_type') is not None:  # noqa: E501
            _query_params.append(('termType', _params['term_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/xml']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Atom",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/atom', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def autocomplete_concepts1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], query : Optional[StrictStr] = None, expression : Optional[StrictStr] = None, clause : Optional[StrictStr] = None, limit : Optional[StrictInt] = None, **kwargs) -> ResultListConcept:  # noqa: E501
        """Autocomplete  # noqa: E501

        Find concepts for a type-ahead search field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_concepts1(terminology, query, expression, clause, limit, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param query:
        :type query: str
        :param expression:
        :type expression: str
        :param clause:
        :type clause: str
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConcept
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the autocomplete_concepts1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.autocomplete_concepts1_with_http_info(terminology, query, expression, clause, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def autocomplete_concepts1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], query : Optional[StrictStr] = None, expression : Optional[StrictStr] = None, clause : Optional[StrictStr] = None, limit : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Autocomplete  # noqa: E501

        Find concepts for a type-ahead search field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_concepts1_with_http_info(terminology, query, expression, clause, limit, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param query:
        :type query: str
        :param expression:
        :type expression: str
        :param clause:
        :type clause: str
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConcept, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'query',
            'expression',
            'clause',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autocomplete_concepts1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('expression') is not None:  # noqa: E501
            _query_params.append(('expression', _params['expression']))

        if _params.get('clause') is not None:  # noqa: E501
            _query_params.append(('clause', _params['clause']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConcept",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/autocomplete', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_concepts(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], query : Annotated[Optional[StrictStr], Field(description="query, e.g. \"heart attack\"")] = None, expression : Annotated[Optional[StrictStr], Field(description="ECL Expression, e.g. <<80891009")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset, e.g. 0")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit, e.g. 10")] = None, ascending : Annotated[Optional[StrictBool], Field(description="ascending, e.g. true")] = None, sort : Annotated[Optional[StrictStr], Field(description="sort field, e.g. code")] = None, handler : Annotated[Optional[StrictStr], Field(description="search handler, e.g. STANDARD, EXACT, NGRAM")] = None, resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, active : Annotated[Optional[StrictBool], Field(description="active only, e.g. true")] = None, leaf : Annotated[Optional[StrictBool], Field(description="leaf nodes only, e.g. false")] = None, **kwargs) -> ResultListConcept:  # noqa: E501
        """Find concepts  # noqa: E501

        Find concepts matching the specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_concepts(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param query: query, e.g. \"heart attack\"
        :type query: str
        :param expression: ECL Expression, e.g. <<80891009
        :type expression: str
        :param offset: offset, e.g. 0
        :type offset: int
        :param limit: limit, e.g. 10
        :type limit: int
        :param ascending: ascending, e.g. true
        :type ascending: bool
        :param sort: sort field, e.g. code
        :type sort: str
        :param handler: search handler, e.g. STANDARD, EXACT, NGRAM
        :type handler: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param active: active only, e.g. true
        :type active: bool
        :param leaf: leaf nodes only, e.g. false
        :type leaf: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConcept
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_concepts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_concepts_with_http_info(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, **kwargs)  # noqa: E501

    @validate_arguments
    def find_concepts_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], query : Annotated[Optional[StrictStr], Field(description="query, e.g. \"heart attack\"")] = None, expression : Annotated[Optional[StrictStr], Field(description="ECL Expression, e.g. <<80891009")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset, e.g. 0")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit, e.g. 10")] = None, ascending : Annotated[Optional[StrictBool], Field(description="ascending, e.g. true")] = None, sort : Annotated[Optional[StrictStr], Field(description="sort field, e.g. code")] = None, handler : Annotated[Optional[StrictStr], Field(description="search handler, e.g. STANDARD, EXACT, NGRAM")] = None, resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, active : Annotated[Optional[StrictBool], Field(description="active only, e.g. true")] = None, leaf : Annotated[Optional[StrictBool], Field(description="leaf nodes only, e.g. false")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find concepts  # noqa: E501

        Find concepts matching the specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_concepts_with_http_info(terminology, query, expression, offset, limit, ascending, sort, handler, resolver, active, leaf, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param query: query, e.g. \"heart attack\"
        :type query: str
        :param expression: ECL Expression, e.g. <<80891009
        :type expression: str
        :param offset: offset, e.g. 0
        :type offset: int
        :param limit: limit, e.g. 10
        :type limit: int
        :param ascending: ascending, e.g. true
        :type ascending: bool
        :param sort: sort field, e.g. code
        :type sort: str
        :param handler: search handler, e.g. STANDARD, EXACT, NGRAM
        :type handler: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param active: active only, e.g. true
        :type active: bool
        :param leaf: leaf nodes only, e.g. false
        :type leaf: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConcept, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'query',
            'expression',
            'offset',
            'limit',
            'ascending',
            'sort',
            'handler',
            'resolver',
            'active',
            'leaf'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_concepts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('expression') is not None:  # noqa: E501
            _query_params.append(('expression', _params['expression']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('handler') is not None:  # noqa: E501
            _query_params.append(('handler', _params['handler']))

        if _params.get('resolver') is not None:  # noqa: E501
            _query_params.append(('resolver', _params['resolver']))

        if _params.get('active') is not None:  # noqa: E501
            _query_params.append(('active', _params['active']))

        if _params.get('leaf') is not None:  # noqa: E501
            _query_params.append(('leaf', _params['leaf']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConcept",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_concepts2(self, query : Annotated[Optional[StrictStr], Field(description="query, e.g. \"heart attack\"")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset, e.g. 0")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit, e.g. 10")] = None, ascending : Annotated[Optional[StrictBool], Field(description="ascending, e.g. true")] = None, sort : Annotated[Optional[StrictStr], Field(description="sort field, e.g. code")] = None, handler : Annotated[Optional[StrictStr], Field(description="search handler, e.g. STANDARD, EXACT, NGRAM")] = None, resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, active : Annotated[Optional[StrictBool], Field(description="active only, e.g. true")] = None, leaf : Annotated[Optional[StrictBool], Field(description="leaf nodes only, e.g. false")] = None, **kwargs) -> ResultListConcept:  # noqa: E501
        """Find concepts (across all terminologies)  # noqa: E501

        Find concepts matching the specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_concepts2(query, offset, limit, ascending, sort, handler, resolver, active, leaf, async_req=True)
        >>> result = thread.get()

        :param query: query, e.g. \"heart attack\"
        :type query: str
        :param offset: offset, e.g. 0
        :type offset: int
        :param limit: limit, e.g. 10
        :type limit: int
        :param ascending: ascending, e.g. true
        :type ascending: bool
        :param sort: sort field, e.g. code
        :type sort: str
        :param handler: search handler, e.g. STANDARD, EXACT, NGRAM
        :type handler: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param active: active only, e.g. true
        :type active: bool
        :param leaf: leaf nodes only, e.g. false
        :type leaf: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConcept
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_concepts2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_concepts2_with_http_info(query, offset, limit, ascending, sort, handler, resolver, active, leaf, **kwargs)  # noqa: E501

    @validate_arguments
    def find_concepts2_with_http_info(self, query : Annotated[Optional[StrictStr], Field(description="query, e.g. \"heart attack\"")] = None, offset : Annotated[Optional[StrictInt], Field(description="offset, e.g. 0")] = None, limit : Annotated[Optional[StrictInt], Field(description="limit, e.g. 10")] = None, ascending : Annotated[Optional[StrictBool], Field(description="ascending, e.g. true")] = None, sort : Annotated[Optional[StrictStr], Field(description="sort field, e.g. code")] = None, handler : Annotated[Optional[StrictStr], Field(description="search handler, e.g. STANDARD, EXACT, NGRAM")] = None, resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, active : Annotated[Optional[StrictBool], Field(description="active only, e.g. true")] = None, leaf : Annotated[Optional[StrictBool], Field(description="leaf nodes only, e.g. false")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find concepts (across all terminologies)  # noqa: E501

        Find concepts matching the specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_concepts2_with_http_info(query, offset, limit, ascending, sort, handler, resolver, active, leaf, async_req=True)
        >>> result = thread.get()

        :param query: query, e.g. \"heart attack\"
        :type query: str
        :param offset: offset, e.g. 0
        :type offset: int
        :param limit: limit, e.g. 10
        :type limit: int
        :param ascending: ascending, e.g. true
        :type ascending: bool
        :param sort: sort field, e.g. code
        :type sort: str
        :param handler: search handler, e.g. STANDARD, EXACT, NGRAM
        :type handler: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param active: active only, e.g. true
        :type active: bool
        :param leaf: leaf nodes only, e.g. false
        :type leaf: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConcept, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'offset',
            'limit',
            'ascending',
            'sort',
            'handler',
            'resolver',
            'active',
            'leaf'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_concepts2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('handler') is not None:  # noqa: E501
            _query_params.append(('handler', _params['handler']))

        if _params.get('resolver') is not None:  # noqa: E501
            _query_params.append(('resolver', _params['resolver']))

        if _params.get('active') is not None:  # noqa: E501
            _query_params.append(('active', _params['active']))

        if _params.get('leaf') is not None:  # noqa: E501
            _query_params.append(('leaf', _params['leaf']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConcept",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_mappings1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 6011000124106")], query : Optional[StrictStr] = None, offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ResultListMapping:  # noqa: E501
        """Find mappings  # noqa: E501

        Find mappings for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_mappings1(terminology, code, query, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 6011000124106 (required)
        :type code: str
        :param query:
        :type query: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListMapping
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_mappings1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_mappings1_with_http_info(terminology, code, query, offset, limit, ascending, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def find_mappings1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 6011000124106")], query : Optional[StrictStr] = None, offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find mappings  # noqa: E501

        Find mappings for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_mappings1_with_http_info(terminology, code, query, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 6011000124106 (required)
        :type code: str
        :param query:
        :type query: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListMapping, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'query',
            'offset',
            'limit',
            'ascending',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_mappings1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListMapping",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/mapset/{terminology}/{code}/mapping', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_subset_memberships1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 723264001")], **kwargs) -> ResultListSubset:  # noqa: E501
        """Get concept subset memberships  # noqa: E501

        Get subsets that the specified terminology and code are a member of  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_subset_memberships1(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 723264001 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListSubset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_subset_memberships1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_subset_memberships1_with_http_info(terminology, code, **kwargs)  # noqa: E501

    @validate_arguments
    def find_subset_memberships1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 723264001")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get concept subset memberships  # noqa: E501

        Get subsets that the specified terminology and code are a member of  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_subset_memberships1_with_http_info(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 723264001 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListSubset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_subset_memberships1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListSubset",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/subsets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_tree_position_children1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ResultListConceptTreePosition:  # noqa: E501
        """Find tree position children  # noqa: E501

        Find the child tree position nodes for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_tree_position_children1(terminology, code, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConceptTreePosition
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_tree_position_children1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_tree_position_children1_with_http_info(terminology, code, offset, limit, ascending, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def find_tree_position_children1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find tree position children  # noqa: E501

        Find the child tree position nodes for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_tree_position_children1_with_http_info(terminology, code, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConceptTreePosition, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'offset',
            'limit',
            'ascending',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tree_position_children1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConceptTreePosition",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/trees/children', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_tree_positions1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ResultListConceptTreePosition:  # noqa: E501
        """Find tree positions  # noqa: E501

        Find tree positions for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_tree_positions1(terminology, code, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConceptTreePosition
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_tree_positions1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_tree_positions1_with_http_info(terminology, code, offset, limit, ascending, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def find_tree_positions1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find tree positions  # noqa: E501

        Find tree positions for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_tree_positions1_with_http_info(terminology, code, offset, limit, ascending, sort, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConceptTreePosition, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'offset',
            'limit',
            'ascending',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tree_positions1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConceptTreePosition",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/trees', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_concept1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, **kwargs) -> Concept:  # noqa: E501
        """Get concept  # noqa: E501

        Get concept object for the specified terminology, code, and resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concept1(terminology, code, resolver, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Concept
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_concept1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_concept1_with_http_info(terminology, code, resolver, **kwargs)  # noqa: E501

    @validate_arguments
    def get_concept1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], resolver : Annotated[Optional[StrictStr], Field(description="graph resolver, e.g. DEFAULT, MIN")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get concept  # noqa: E501

        Get concept object for the specified terminology, code, and resolver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concept1_with_http_info(terminology, code, resolver, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param resolver: graph resolver, e.g. DEFAULT, MIN
        :type resolver: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Concept, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'resolver'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('resolver') is not None:  # noqa: E501
            _query_params.append(('resolver', _params['resolver']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Concept",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_concept_mappings1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 283231003")], **kwargs) -> ResultListMapping:  # noqa: E501
        """Get concept mappings  # noqa: E501

        Get mappings that the specified terminology and code are mapped from  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concept_mappings1(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 283231003 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListMapping
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_concept_mappings1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_concept_mappings1_with_http_info(terminology, code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_concept_mappings1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 283231003")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get concept mappings  # noqa: E501

        Get mappings that the specified terminology and code are mapped from  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concept_mappings1_with_http_info(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 283231003 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListMapping, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_mappings1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListMapping",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/mapping', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_config_properties1(self, **kwargs) -> None:  # noqa: E501
        """Get properties  # noqa: E501

        Get configuration information used to drive certain UI functionality  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_config_properties1(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_config_properties1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_config_properties1_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_config_properties1_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get properties  # noqa: E501

        Get configuration information used to drive certain UI functionality  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_config_properties1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_properties1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/terminology/properties', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_mapset1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 6011000124106")], **kwargs) -> Mapset:  # noqa: E501
        """Get mapset  # noqa: E501

        Get mapsets for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapset1(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 6011000124106 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Mapset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_mapset1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_mapset1_with_http_info(terminology, code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_mapset1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 6011000124106")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get mapset  # noqa: E501

        Get mapsets for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapset1_with_http_info(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 6011000124106 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Mapset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapset1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Mapset",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/mapset/{terminology}/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_mapsets1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ResultListMapset:  # noqa: E501
        """Get mapsets  # noqa: E501

        Get all mapsets for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapsets1(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListMapset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_mapsets1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_mapsets1_with_http_info(terminology, **kwargs)  # noqa: E501

    @validate_arguments
    def get_mapsets1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get mapsets  # noqa: E501

        Get all mapsets for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapsets1_with_http_info(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListMapset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapsets1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListMapset",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/mapset/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_relationships1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, inverse : Optional[StrictBool] = None, active : Optional[StrictBool] = None, filter : Optional[StrictStr] = None, **kwargs) -> ResultListConceptRelationship:  # noqa: E501
        """Get concept relationships  # noqa: E501

        Get relationships for for specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_relationships1(terminology, code, offset, limit, ascending, sort, inverse, active, filter, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param inverse:
        :type inverse: bool
        :param active:
        :type active: bool
        :param filter:
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListConceptRelationship
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_relationships1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_relationships1_with_http_info(terminology, code, offset, limit, ascending, sort, inverse, active, filter, **kwargs)  # noqa: E501

    @validate_arguments
    def get_relationships1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], offset : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, ascending : Optional[StrictBool] = None, sort : Optional[StrictStr] = None, inverse : Optional[StrictBool] = None, active : Optional[StrictBool] = None, filter : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get concept relationships  # noqa: E501

        Get relationships for for specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_relationships1_with_http_info(terminology, code, offset, limit, ascending, sort, inverse, active, filter, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param ascending:
        :type ascending: bool
        :param sort:
        :type sort: str
        :param inverse:
        :type inverse: bool
        :param active:
        :type active: bool
        :param filter:
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListConceptRelationship, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'offset',
            'limit',
            'ascending',
            'sort',
            'inverse',
            'active',
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relationships1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('ascending') is not None:  # noqa: E501
            _query_params.append(('ascending', _params['ascending']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('inverse') is not None:  # noqa: E501
            _query_params.append(('inverse', _params['inverse']))

        if _params.get('active') is not None:  # noqa: E501
            _query_params.append(('active', _params['active']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListConceptRelationship",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/relationships', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_subset1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 723264001")], **kwargs) -> Subset:  # noqa: E501
        """Get subset  # noqa: E501

        Get subsets for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subset1(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 723264001 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Subset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_subset1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_subset1_with_http_info(terminology, code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_subset1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 723264001")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get subset  # noqa: E501

        Get subsets for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subset1_with_http_info(terminology, code, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 723264001 (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Subset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subset1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Subset",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/subset/{terminology}/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_subsets1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ResultListSubset:  # noqa: E501
        """Get subsets  # noqa: E501

        Get all subsets for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subsets1(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultListSubset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_subsets1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_subsets1_with_http_info(terminology, **kwargs)  # noqa: E501

    @validate_arguments
    def get_subsets1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get subsets  # noqa: E501

        Get all subsets for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subsets1_with_http_info(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultListSubset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subsets1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ResultListSubset",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/subset/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_subtree1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], max_level : Optional[StrictInt] = None, **kwargs) -> ConceptTreePosition:  # noqa: E501
        """Get subtree  # noqa: E501

        Get the subtree for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subtree1(terminology, code, max_level, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param max_level:
        :type max_level: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConceptTreePosition
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_subtree1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_subtree1_with_http_info(terminology, code, max_level, **kwargs)  # noqa: E501

    @validate_arguments
    def get_subtree1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], code : Annotated[StrictStr, Field(..., description="concept code, e.g. 71388002")], max_level : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get subtree  # noqa: E501

        Get the subtree for the specified terminology and code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subtree1_with_http_info(terminology, code, max_level, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param code: concept code, e.g. 71388002 (required)
        :type code: str
        :param max_level:
        :type max_level: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConceptTreePosition, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'code',
            'max_level'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subtree1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('max_level') is not None:  # noqa: E501
            _query_params.append(('maxLevel', _params['max_level']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ConceptTreePosition",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/concept/{terminology}/{code}/subtree', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_terminologies1(self, **kwargs) -> List[Terminology]:  # noqa: E501
        """Get terminologies  # noqa: E501

        Get all terminologies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminologies1(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Terminology]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_terminologies1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_terminologies1_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_terminologies1_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get terminologies  # noqa: E501

        Get all terminologies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminologies1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Terminology], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_terminologies1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[Terminology]",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_terminology1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> Terminology:  # noqa: E501
        """Get terminology  # noqa: E501

        Get terminology object for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminology1(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Terminology
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_terminology1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_terminology1_with_http_info(terminology, **kwargs)  # noqa: E501

    @validate_arguments
    def get_terminology1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get terminology  # noqa: E501

        Get terminology object for the specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminology1_with_http_info(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Terminology, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_terminology1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Terminology",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_terminology_metadata1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> None:  # noqa: E501
        """Get terminology metadata  # noqa: E501

        Get map of terminology abbreviations to metadata for specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminology_metadata1(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_terminology_metadata1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_terminology_metadata1_with_http_info(terminology, **kwargs)  # noqa: E501

    @validate_arguments
    def get_terminology_metadata1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get terminology metadata  # noqa: E501

        Get map of terminology abbreviations to metadata for specified terminology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_terminology_metadata1_with_http_info(terminology, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'terminology'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_terminology_metadata1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/terminology/metadata/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def resolve_expression1(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], expression : Optional[StrictStr] = None, **kwargs) -> List[str]:  # noqa: E501
        """Resolve expression  # noqa: E501

        Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see <a href=\"https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\">https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resolve_expression1(terminology, expression, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param expression:
        :type expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the resolve_expression1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.resolve_expression1_with_http_info(terminology, expression, **kwargs)  # noqa: E501

    @validate_arguments
    def resolve_expression1_with_http_info(self, terminology : Annotated[StrictStr, Field(..., description="terminology, e.g. SNOMEDCT_US")], expression : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Resolve expression  # noqa: E501

        Get concept ids corresponding to thespecified terminology and expression. For more information on working with expressions, see <a href=\"https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md\">https://github.com/WestCoastInformatics/wci-terminology-service-in-5-minutes/blob/master/doc/EXPRESSION.md</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resolve_expression1_with_http_info(terminology, expression, async_req=True)
        >>> result = thread.get()

        :param terminology: terminology, e.g. SNOMEDCT_US (required)
        :type terminology: str
        :param expression:
        :type expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'terminology',
            'expression'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_expression1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['terminology']:
            _path_params['terminology'] = _params['terminology']


        # process the query parameters
        _query_params = []
        if _params.get('expression') is not None:  # noqa: E501
            _query_params.append(('expression', _params['expression']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[str]",
            '401': None,
            '403': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/terminology/expr/{terminology}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
