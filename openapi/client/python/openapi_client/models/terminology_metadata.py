# coding: utf-8

"""
    West Coast Informatics Terminology API

    API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@westcoastinformatics.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.metadata import Metadata
from openapi_client.models.terminology import Terminology

class TerminologyMetadata(BaseModel):
    """
    Represents all types of metadata associated with a terminology
    """
    attribute_names: Optional[Dict[str, Metadata]] = Field(None, alias="attributeNames", description="the attribute names used by the terminology")
    terminology: Terminology = Field(...)
    semantic_types: Optional[Dict[str, Metadata]] = Field(None, alias="semanticTypes", description="the semantic types used by the terminology")
    additional_relationship_types: Optional[Dict[str, Metadata]] = Field(None, alias="additionalRelationshipTypes", description="the additional relationship types used by the terminology")
    relationship_types: Optional[Dict[str, Metadata]] = Field(None, alias="relationshipTypes", description="the relationship types used by the terminology")
    term_types: Optional[Dict[str, Metadata]] = Field(None, alias="termTypes", description="the term types used by the terminology")
    languages: Optional[Dict[str, Metadata]] = Field(None, description="the languages used by the terminology")
    other: Optional[Dict[str, Metadata]] = Field(None, description="miscellaneous terminology metadata (terminology-specific)")
    created: datetime = Field(..., description="the created date")
    local: StrictBool = Field(..., description="indicates whether this data element was created by local editing")
    modified_by: StrictStr = Field(..., alias="modifiedBy", description="the identifier of the user who made the last modification")
    modified: datetime = Field(..., description="the last modified date")
    id: StrictStr = Field(..., description="the unique identifier")
    active: StrictBool = Field(..., description="indicates whether or not this data element is active")
    __properties = ["attributeNames", "terminology", "semanticTypes", "additionalRelationshipTypes", "relationshipTypes", "termTypes", "languages", "other", "created", "local", "modifiedBy", "modified", "id", "active"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TerminologyMetadata:
        """Create an instance of TerminologyMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in attribute_names (dict)
        _field_dict = {}
        if self.attribute_names:
            for _key in self.attribute_names:
                if self.attribute_names[_key]:
                    _field_dict[_key] = self.attribute_names[_key].to_dict()
            _dict['attributeNames'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of terminology
        if self.terminology:
            _dict['terminology'] = self.terminology.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in semantic_types (dict)
        _field_dict = {}
        if self.semantic_types:
            for _key in self.semantic_types:
                if self.semantic_types[_key]:
                    _field_dict[_key] = self.semantic_types[_key].to_dict()
            _dict['semanticTypes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in additional_relationship_types (dict)
        _field_dict = {}
        if self.additional_relationship_types:
            for _key in self.additional_relationship_types:
                if self.additional_relationship_types[_key]:
                    _field_dict[_key] = self.additional_relationship_types[_key].to_dict()
            _dict['additionalRelationshipTypes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in relationship_types (dict)
        _field_dict = {}
        if self.relationship_types:
            for _key in self.relationship_types:
                if self.relationship_types[_key]:
                    _field_dict[_key] = self.relationship_types[_key].to_dict()
            _dict['relationshipTypes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in term_types (dict)
        _field_dict = {}
        if self.term_types:
            for _key in self.term_types:
                if self.term_types[_key]:
                    _field_dict[_key] = self.term_types[_key].to_dict()
            _dict['termTypes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in languages (dict)
        _field_dict = {}
        if self.languages:
            for _key in self.languages:
                if self.languages[_key]:
                    _field_dict[_key] = self.languages[_key].to_dict()
            _dict['languages'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in other (dict)
        _field_dict = {}
        if self.other:
            for _key in self.other:
                if self.other[_key]:
                    _field_dict[_key] = self.other[_key].to_dict()
            _dict['other'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TerminologyMetadata:
        """Create an instance of TerminologyMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TerminologyMetadata.parse_obj(obj)

        _obj = TerminologyMetadata.parse_obj({
            "attribute_names": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("attributeNames").items()
            )
            if obj.get("attributeNames") is not None
            else None,
            "terminology": Terminology.from_dict(obj.get("terminology")) if obj.get("terminology") is not None else None,
            "semantic_types": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("semanticTypes").items()
            )
            if obj.get("semanticTypes") is not None
            else None,
            "additional_relationship_types": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("additionalRelationshipTypes").items()
            )
            if obj.get("additionalRelationshipTypes") is not None
            else None,
            "relationship_types": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("relationshipTypes").items()
            )
            if obj.get("relationshipTypes") is not None
            else None,
            "term_types": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("termTypes").items()
            )
            if obj.get("termTypes") is not None
            else None,
            "languages": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("languages").items()
            )
            if obj.get("languages") is not None
            else None,
            "other": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("other").items()
            )
            if obj.get("other") is not None
            else None,
            "created": obj.get("created"),
            "local": obj.get("local"),
            "modified_by": obj.get("modifiedBy"),
            "modified": obj.get("modified"),
            "id": obj.get("id"),
            "active": obj.get("active")
        })
        return _obj


