# coding: utf-8

"""
    West Coast Informatics Terminology API

    API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@westcoastinformatics.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class AuthRequest(BaseModel):
    """
    Represents info for an authentication request.
    """
    username: Optional[StrictStr] = Field(None, description="the username")
    password: Optional[StrictStr] = Field(None, description="the password")
    token: Optional[StrictStr] = Field(None, description="the token (for a refresh flow)")
    grant_type: StrictStr = Field(...)
    __properties = ["username", "password", "token", "grant_type"]

    @validator('grant_type')
    def grant_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('username_password', 'password', 'authorization_code'):
            raise ValueError("must be one of enum values ('username_password', 'password', 'authorization_code')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthRequest:
        """Create an instance of AuthRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthRequest:
        """Create an instance of AuthRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthRequest.parse_obj(obj)

        _obj = AuthRequest.parse_obj({
            "username": obj.get("username"),
            "password": obj.get("password"),
            "token": obj.get("token"),
            "grant_type": obj.get("grant_type")
        })
        return _obj


