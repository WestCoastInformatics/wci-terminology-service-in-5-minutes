# coding: utf-8

"""
    West Coast Informatics Terminology API

    API documentation for the <a href=\"https://www.westcoastinformatics.com\">West Coast Informatics</a> terminology server API.<p>Request a 30-day bearer token from <a href=\"mailto:info@westcoastinformatics.com\">info@westcoastinformatics.com</a>.</p> <p>For full documentation on this service, please visit our wiki page at <a href=\"https://wci-wiki.atlassian.net/wiki/spaces/TSV2\">https://wci-wiki.atlassian.net/wiki/spaces/TSV2</a>.</p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@westcoastinformatics.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class Terminology(BaseModel):
    """
    Represents a terminology abbreviation and associated metadata
    """
    version: StrictStr = Field(..., description="the terminology version")
    abbreviation: StrictStr = Field(..., description="the terminology abbreviation")
    system_oid: Optional[StrictStr] = Field(None, alias="systemOid", description="the OID for the terminology")
    system_uri: Optional[StrictStr] = Field(None, alias="systemUri", description="the FHIR system URI for the terminology")
    expression_enabled: StrictBool = Field(..., alias="expressionEnabled", description="indicates whether ECL-style expressions can be used when searching the terminology")
    name: StrictStr = Field(..., description="the name")
    created: datetime = Field(..., description="the created date")
    local: StrictBool = Field(..., description="indicates whether this data element was created by local editing")
    modified_by: StrictStr = Field(..., alias="modifiedBy", description="the identifier of the user who made the last modification")
    modified: datetime = Field(..., description="the last modified date")
    id: StrictStr = Field(..., description="the unique identifier")
    active: StrictBool = Field(..., description="indicates whether or not this data element is active")
    attributes: Optional[Dict[str, StrictStr]] = Field(None, description="key/value pairs associated with this object. Entries in this map are terminology-specific")
    __properties = ["version", "abbreviation", "systemOid", "systemUri", "expressionEnabled", "name", "created", "local", "modifiedBy", "modified", "id", "active", "attributes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Terminology:
        """Create an instance of Terminology from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Terminology:
        """Create an instance of Terminology from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Terminology.parse_obj(obj)

        _obj = Terminology.parse_obj({
            "version": obj.get("version"),
            "abbreviation": obj.get("abbreviation"),
            "system_oid": obj.get("systemOid"),
            "system_uri": obj.get("systemUri"),
            "expression_enabled": obj.get("expressionEnabled"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "local": obj.get("local"),
            "modified_by": obj.get("modifiedBy"),
            "modified": obj.get("modified"),
            "id": obj.get("id"),
            "active": obj.get("active"),
            "attributes": obj.get("attributes")
        })
        return _obj


